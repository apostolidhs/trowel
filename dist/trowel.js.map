{"version":3,"sources":["frontend/utilities/CharPoints.ts","frontend/lexical/Exception.ts","frontend/lexical/TokenDefinitions.ts","frontend/lexical/Identifyers.ts","frontend/lexical/Lexer.ts","frontend/lexical/CharacterStream.ts","frontend/api.ts"],"names":["trl","trl.frontend","trl.frontend.utilities","trl.frontend.utilities.CharPoints","trl.frontend.utilities.CharPoints.createStringFromCharPointGenerator","trl.frontend.utilities.CharPoints.getDigitFromCharPoint","trl.frontend.utilities.CharPoints.codePointAt","trl.frontend.utilities.CharPoints.fromCodePoint","trl.frontend.lexical","trl.frontend.lexical.ExceptionHandler","trl.frontend.lexical.ExceptionHandler.constructor","trl.frontend.lexical.ExceptionHandler.addException","trl.frontend.lexical.ExceptionHandler.hasExceptions","trl.frontend.lexical.ExceptionHandler.clear","trl.frontend.lexical.ExceptionHandler.getExceptions","trl.frontend.lexical.TokenDefinitions","trl.frontend.lexical.Identifyers","trl.frontend.lexical.Identifyers.isHexDigit","trl.frontend.lexical.Identifyers.isDigit","trl.frontend.lexical.Identifyers.isKeyword","trl.frontend.lexical.Identifyers.isLineTerminator","trl.frontend.lexical.Identifyers.isIdentifierStart","trl.frontend.lexical.Identifyers.isIdentifierPart","trl.frontend.lexical.Identifyers.isSimpleUnicodeContinue","trl.frontend.lexical.Identifyers.isComplexUnicodeContinue","trl.frontend.lexical.Identifyers.isSimpleUnicodeStart","trl.frontend.lexical.Identifyers.isComplexUnicodeStart","trl.frontend.lexical.Identifyers.isPunctuationStart","trl.frontend.lexical.Lexer","trl.frontend.lexical.Lexer.constructor","trl.frontend.lexical.Lexer.initiateCharecterLookupOnce","trl.frontend.lexical.Lexer.getNextToken","trl.frontend.lexical.Lexer.stateInit","trl.frontend.lexical.Lexer.stateIdentifier","trl.frontend.lexical.Lexer.genStateString","charStream","getNextChar","charGen","frontend","utilities","CharPoints","createStringFromCharPointGenerator","char","stringTerminatorChar","PNC","backslash","b","addCharPoint","f","n","r","t","v","x","handleScanHexDigits","States","error","u","lexical","Identifyers","isLineTerminator","handleNewLine","undefined","exceptionHandler","addException","lineno","getCursor","token","createToken","TokenValues","literal","getString","finish","trl.frontend.lexical.Lexer.stateNumber","trl.frontend.lexical.Lexer.stateDotOrNumber","trl.frontend.lexical.Lexer.stateDivOrComment","trl.frontend.lexical.Lexer.statePunctuationSingle","trl.frontend.lexical.Lexer.stateWhiteSpace","trl.frontend.lexical.Lexer.stateLineTerminator","trl.frontend.lexical.Lexer.stateSingleComment","trl.frontend.lexical.Lexer.stateMultiComment","trl.frontend.lexical.Lexer.scanUnicodeEscapeSequence","trl.frontend.lexical.Lexer.scanExponensialAndCreateNumber","trl.frontend.lexical.Lexer.scanDigits","trl.frontend.lexical.Lexer.scanDecimal","trl.frontend.lexical.Lexer.scanExponential","trl.frontend.lexical.Lexer.scanHexDigits","trl.frontend.lexical.Lexer.scanHexDigitsTimes","trl.frontend.lexical.Lexer.genPunctuationScanner","fwdCursor","i","lastLen","puncsLookup","bwdCursor","createTokenFromPos","punctuation","startPos","trl.frontend.lexical.Lexer.createPos","trl.frontend.lexical.Lexer.createTokenFromPos","trl.frontend.lexical.Lexer.createToken","trl.frontend.lexical.Lexer.genIntegerFromArray","trl.frontend.lexical.Lexer.createNumber","trl.frontend.lexical.Lexer.handleScanHexDigits","trl.frontend.lexical.Lexer.handleNewLine","trl.frontend.lexical.CharacterStream","trl.frontend.lexical.CharacterStream.constructor","trl.frontend.lexical.CharacterStream.getNextChar","trl.frontend.lexical.CharacterStream.getChar","trl.frontend.lexical.CharacterStream.getCursor","trl.frontend.lexical.CharacterStream.bwdCursor","trl.frontend.lexical.CharacterStream.fwdCursor","trl.frontend.lexical.CharacterStream.bwdCursorRange","trl.frontend.lexical.CharacterStream.tokenize","trl.frontend.lexical.CharacterStream.match","trl.frontend.lexical.CharacterStream.matchComplex","trl.frontend.lexical.CharacterStream.isEof","trl.frontend.lexical.CharacterStream.hasNext","trl.frontend.api","trl.frontend.api.tokenize"],"mappings":";;;;;;;;;;;;;;;;QAEA,IAAOA,GAAP,C;QAAA,CAAA,UAAOA,GAAP,EAAU;AAAA,YAACA,IAAAA,QAAAA,CAAD;AAAA,YAACA,CAAAA,UAAAA,QAAAA,EAAQA;AAAAA,gBAACC,IAAAA,SAAAA,CAADD;AAAAA,gBAACC,CAAAA,UAAAA,SAAAA,EAAUA;AAAAA,oBAO7BC,IAAAA,UAAAA,GAAAA,YAAAA;AAAAA,wBAAAC,SAAAA,UAAAA,GAAAA;AAAAA,yBAAAD;AAAAA,wBACQC,UAAAA,CAAAA,kCAAAA,GAAPA,YAAAA;AAAAA,4BACCC,IAAIA,UAAAA,GAAuBA,EAA3BA,CADDD;AAAAA,4BAECC,OAAOA;AAAAA,gCACNA,YAAAA,EAAcA,UAACA,IAADA,EAAaA;AAAAA,oCAC1BA,UAAAA,CAAWA,IAAXA,CAAgBA,UAAAA,CAAWA,aAAXA,CAAyBA,IAAzBA,CAAhBA,EAD0BA;AAAAA,iCADrBA;AAAAA,gCAINA,SAAAA,EAAWA,YAAAA;AAAAA,oCACVA,OAAOA,UAAAA,CAAWA,IAAXA,CAAgBA,EAAhBA,CAAPA,CADUA;AAAAA,iCAJLA;AAAAA,6BAAPA,CAFDD;AAAAA,yBAAOA,CADRD;AAAAA,wBAcQC,UAAAA,CAAAA,qBAAAA,GAAPA,UAA6BA,CAA7BA,EAAsCA;AAAAA,4BACrCE,OAAOA,CAAAA,GAAIA,UAAAA,CAAWA,cAAtBA,CADqCF;AAAAA,yBAA/BA,CAdRD;AAAAA,wBAkBQC,UAAAA,CAAAA,WAAAA,GAAPA,UAAmBA,GAAnBA,EAAgCA,GAAhCA,EAA2CA;AAAAA,4BAC1CG,OAAaA,GAAAA,CAAKA,WAALA,CAAiBA,GAAjBA,CAAbA,CAD0CH;AAAAA,yBAApCA,CAlBRD;AAAAA,wBAsBQC,UAAAA,CAAAA,aAAAA,GAAPA,UAAqBA,KAArBA,EAAkCA;AAAAA,4BACjCI,OAAaA,MAAAA,CAAQA,aAARA,CAAsBA,KAAtBA,CAAbA,CADiCJ;AAAAA,yBAA3BA,CAtBRD;AAAAA,wBAagBC,UAAAA,CAAAA,cAAAA,GAAiBA,IAAIA,UAAJA,CAAeA,CAAfA,CAAjBA,CAbhBD;AAAAA,wBAyBAC,OAAAA,UAAAA,CAzBAD;AAAAA,qBAAAA,EAAAA,CAP6BD;AAAAA,oBAOhBC,SAAAA,CAAAA,UAAAA,GAAUA,UAAVA,CAPgBD;AAAAA,iBAAVA,CAAAA,SAAAA,GAAAA,QAAAA,CAAAA,SAAAA,IAAAA,CAAAA,QAAAA,CAAAA,SAAAA,GAASA,EAATA,CAAAA,GAADD;AAAAA,aAARA,CAAAA,QAAAA,GAAAA,GAAAA,CAAAA,QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,GAAQA,EAARA,CAAAA,GAAD;AAAA,SAAV,CAAOA,GAAA,IAAA,CAAAA,GAAA,GAAG,EAAH,CAAP,G;QCAA;AAAA,YAAOA,GAAP,C;QAAA,CAAA,UAAOA,GAAP,EAAU;AAAA,YAACA,IAAAA,QAAAA,CAAD;AAAA,YAACA,CAAAA,UAAAA,QAAAA,EAAQA;AAAAA,gBAACC,IAAAA,OAAAA,CAADD;AAAAA,gBAACC,CAAAA,UAAAA,OAAAA,EAAQA;AAAAA,oBAC3BO,IAAAA,gBAAAA,GAAAA,YAAAA;AAAAA,wBAGCC,SAAAA,gBAAAA,GAAAA;AAAAA,4BAFQC,KAAAA,UAAAA,GAA2BA,EAA3BA,CAERD;AAAAA,yBAHDD;AAAAA,wBAKQC,gBAAAA,CAAAA,SAAAA,CAAAA,YAAAA,GAAPA,UAAoBA,GAApBA,EAAiCA,IAAjCA,EAA+CA,GAA/CA,EAA0DA;AAAAA,4BACzDE,IAAIA,SAAAA,GAAwBA;AAAAA,gCAC3BA,GAAAA,EAAKA;AAAAA,oCACJA,GAAAA,EAAKA,GADDA;AAAAA,oCAEJA,IAAAA,EAAMA,IAFFA;AAAAA,iCADsBA;AAAAA,gCAK3BA,GAAAA,EAAKA,GALsBA;AAAAA,6BAA5BA,CADyDF;AAAAA,4BAQzDE,KAAKA,UAALA,CAAgBA,IAAhBA,CAAqBA,SAArBA,EARyDF;AAAAA,yBAAnDA,CALRD;AAAAA,wBAgBQC,gBAAAA,CAAAA,SAAAA,CAAAA,aAAAA,GAAPA,YAAAA;AAAAA,4BACCG,OAAOA,CAACA,CAAAA,CAAEA,OAAFA,CAAUA,KAAKA,UAAfA,CAARA,CADDH;AAAAA,yBAAOA,CAhBRD;AAAAA,wBAoBQC,gBAAAA,CAAAA,SAAAA,CAAAA,KAAAA,GAAPA,YAAAA;AAAAA,4BACCI,KAAKA,UAALA,CAAgBA,MAAhBA,GAAyBA,CAAzBA,CADDJ;AAAAA,yBAAOA,CApBRD;AAAAA,wBAwBQC,gBAAAA,CAAAA,SAAAA,CAAAA,aAAAA,GAAPA,YAAAA;AAAAA,4BACCK,OAAOA,KAAKA,UAAZA,CADDL;AAAAA,yBAAOA,CAxBRD;AAAAA,wBA2BAC,OAAAA,gBAAAA,CA3BAD;AAAAA,qBAAAA,EAAAA,CAD2BP;AAAAA,oBACdO,OAAAA,CAAAA,gBAAAA,GAAgBA,gBAAhBA,CADcP;AAAAA,iBAARA,CAAAA,OAAAA,GAAAA,QAAAA,CAAAA,OAAAA,IAAAA,CAAAA,QAAAA,CAAAA,OAAAA,GAAOA,EAAPA,CAAAA,GAADD;AAAAA,aAARA,CAAAA,QAAAA,GAAAA,GAAAA,CAAAA,QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,GAAQA,EAARA,CAAAA,GAAD;AAAA,SAAV,CAAOA,GAAA,IAAA,CAAAA,GAAA,GAAG,EAAH,CAAP,G;QCDA,IAAOA,GAAP,C;QAAA,CAAA,UAAOA,GAAP,EAAU;AAAA,YAACA,IAAAA,QAAAA,CAAD;AAAA,YAACA,CAAAA,UAAAA,QAAAA,EAAQA;AAAAA,gBAACC,IAAAA,OAAAA,CAADD;AAAAA,gBAACC,CAAAA,UAAAA,OAAAA,EAAQA;AAAAA,oBAC3BO,IAAMA,CAAAA,GAAIA,IAAVA,CAD2BP;AAAAA,oBAG3BO,IAAAA,gBAAAA,GAAAA,YAAAA;AAAAA,wBAAAO,SAAAA,gBAAAA,GAAAA;AAAAA,yBAAAP;AAAAA,wBAEQO,gBAAAA,CAAAA,EAAAA,GAAKA;AAAAA,4BACXA,GAAQA,CADGA;AAAAA,4BAEXA,IAAQA,CAFGA;AAAAA,4BAGXA,IAAQA,CAHGA;AAAAA,4BAIXA,IAAQA,CAJGA;AAAAA,4BAKXA,KAAQA,CALGA;AAAAA,4BAMXA,OAAQA,CANGA;AAAAA,yBAALA,CAFRP;AAAAA,wBAWQO,gBAAAA,CAAAA,EAAAA,GAAKA;AAAAA,4BACXA,IAAQA,CADGA;AAAAA,4BAEXA,IAAQA,CAFGA;AAAAA,4BAGXA,MAAQA,CAHGA;AAAAA,4BAIXA,KAAOA,CAJIA;AAAAA,yBAALA,CAXRP;AAAAA,wBAqBQO;AAAAA;AAAAA,wBAAAA,gBAAAA,CAAAA,EAAAA,GAAKA;AAAAA,4BACXA,KAAAA,EAAOA,CADIA;AAAAA,4BAEXA,EAAAA,EAAIA,CAFOA;AAAAA,4BAGXA,UAAAA,EAAYA,CAHDA;AAAAA,4BAIXA,MAAAA,EAAQA,CAJGA;AAAAA,4BAKXA,IAAAA,EAAMA,CALKA;AAAAA,4BAMXA,IAAAA,EAAMA,CANKA;AAAAA,4BAOXA,GAAAA,EAAKA,CAPMA;AAAAA,4BAQXA,GAAAA,EAAKA,CARMA;AAAAA,4BASXA,KAAAA,EAAOA,CATIA;AAAAA,4BAUXA,OAAAA,EAASA,CAVEA;AAAAA,4BAWXA,MAAAA,EAAQA,CAXGA;AAAAA,4BAYXA,IAAAA,EAAMA,CAZKA;AAAAA,4BAaXA,QAAAA,EAAUA,CAbCA;AAAAA,4BAcXA,GAAAA,EAAKA,CAdMA;AAAAA,4BAeXA,MAAAA,EAAQA,CAfGA;AAAAA,4BAgBXA,KAAAA,EAAOA,CAhBIA;AAAAA,4BAiBXA,QAAAA,EAAUA,CAjBCA;AAAAA,4BAkBXA,QAAAA,EAAUA,CAlBCA;AAAAA,4BAmBXA,IAAAA,EAAMA,CAnBKA;AAAAA,4BAoBXA,IAAAA,EAAMA,CApBKA;AAAAA,4BAqBXA,OAAAA,EAASA,CArBEA;AAAAA,4BAsBXA,EAAAA,EAAIA,CAtBOA;AAAAA,4BAuBXA,KAAAA,EAAOA,CAvBIA;AAAAA,4BAwBXA,MAAAA,EAAQA,CAxBGA;AAAAA,4BAyBXA,EAAAA,EAAIA,CAzBOA;AAAAA,4BA0BXA,GAAAA,EAAKA,CA1BMA;AAAAA,4BA4BXA,KAAAA,EAAOA,CA5BIA;AAAAA,4BA6BXA,IAAAA,EAAMA,CA7BKA;AAAAA,4BA8BXA,OAAAA,EAASA,CA9BEA;AAAAA,4BA+BXA,KAAAA,EAAOA,CA/BIA;AAAAA,4BAgCXA,KAAAA,EAAOA,CAhCIA;AAAAA,4BAiCXA,MAAAA,EAAQA,CAjCGA;AAAAA,4BAkCXA,MAAAA,EAAQA,CAlCGA;AAAAA,4BAoCXA,UAAAA,EAAYA,CApCDA;AAAAA,4BAqCXA,GAAAA,EAAKA,CArCMA;AAAAA,4BAsCXA,OAAAA,EAASA,CAtCEA;AAAAA,4BAuCXA,MAAAA,EAAQA,CAvCGA;AAAAA,4BAwCXA,SAAAA,EAAWA,CAxCAA;AAAAA,4BAyCXA,OAAAA,EAASA,CAzCEA;AAAAA,4BA0CXA,SAAAA,EAAWA,CA1CAA;AAAAA,4BA2CXA,MAAAA,EAAQA,CA3CGA;AAAAA,4BA4CXA,KAAAA,EAAOA,CA5CIA;AAAAA,yBAALA,CArBRP;AAAAA,wBAoEQO,gBAAAA,CAAAA,GAAAA,GAAMA;AAAAA,4BACZA,IAAAA,EAAMA,CADMA;AAAAA,4BAEZA,IAAAA,EAAMA,CAFMA;AAAAA,4BAGZA,KAAAA,EAAOA,CAHKA;AAAAA,yBAANA,CApERP;AAAAA,wBA0EQO,gBAAAA,CAAAA,UAAAA,GAAaA;AAAAA,4BACnBA,MAAAA,EAAQA,GADWA;AAAAA,4BAEnBA,MAAAA,EAAQA,GAFWA;AAAAA,4BAGnBA,QAAAA,EAAUA,EAHSA;AAAAA,4BAInBA,QAAAA,EAAUA,EAJSA;AAAAA,4BAKnBA,QAAAA,EAAUA,EALSA;AAAAA,4BAMnBA,QAAAA,EAAUA,EANSA;AAAAA,4BAOnBA,GAAAA,EAAKA,EAPcA;AAAAA,4BAQnBA,SAAAA,EAAWA,EARQA;AAAAA,4BASnBA,KAAAA,EAAOA,EATYA;AAAAA,4BAUnBA,IAAAA,EAAMA,EAVaA;AAAAA,4BAWnBA,IAAAA,EAAMA,EAXaA;AAAAA,4BAYnBA,IAAAA,EAAMA,EAZaA;AAAAA,4BAanBA,KAAAA,EAAOA,EAbYA;AAAAA,4BAcnBA,OAAAA,EAASA,EAdUA;AAAAA,4BAenBA,SAAAA,EAAWA,EAfQA;AAAAA,4BAgBnBA,QAAAA,EAAUA,GAhBSA;AAAAA,4BAiBnBA,KAAAA,EAAOA,EAjBYA;AAAAA,4BAkBnBA,IAAAA,EAAMA,EAlBaA;AAAAA,4BAmBnBA,KAAAA,EAAOA,GAnBYA;AAAAA,4BAoBnBA,KAAAA,EAAOA,EApBYA;AAAAA,4BAqBnBA,KAAAA,EAAOA,EArBYA;AAAAA,4BAsBnBA,MAAAA,EAAQA,EAtBWA;AAAAA,4BAuBnBA,QAAAA,EAAUA,EAvBSA;AAAAA,4BAwBnBA,KAAAA,EAAOA,EAxBYA;AAAAA,4BAyBnBA,SAAAA,EAAWA,EAzBQA;AAAAA,4BA0BnBA,MAAAA,EAAQA,EA1BWA;AAAAA,4BA2BnBA,GAAAA,EAAKA,GA3BcA;AAAAA,4BA4BnBA,IAAAA,EAAMA,EA5BaA;AAAAA,4BA6BnBA,UAAAA,EAAYA,EA7BOA;AAAAA,4BA8BnBA,KAAAA,EAAOA,EA9BYA;AAAAA,4BA+BnBA,IAAAA,EAAMA,EA/BaA;AAAAA,4BAiCnBA,CAAAA,EAAGA,EAjCgBA;AAAAA,4BAkCnBA,CAAAA,EAAGA,GAlCgBA;AAAAA,4BAmCnBA,CAAAA,EAAGA,GAnCgBA;AAAAA,4BAoCnBA,CAAAA,EAAGA,GApCgBA;AAAAA,4BAqCnBA,CAAAA,EAAGA,GArCgBA;AAAAA,4BAsCnBA,CAAAA,EAAGA,GAtCgBA;AAAAA,4BAuCnBA,CAAAA,EAAGA,GAvCgBA;AAAAA,4BAwCnBA,CAAAA,EAAGA,GAxCgBA;AAAAA,4BA0CnBA,EAAAA,EAAIA,EA1CeA;AAAAA,yBAAbA,CA1ERP;AAAAA,wBAwHQO,gBAAAA,CAAAA,0BAAAA,GAA6BA,GAA7BA,CAxHRP;AAAAA,wBA0HQO,gBAAAA,CAAAA,uBAAAA,GAA0BA;AAAAA,4BAAEA,MAAQA,eAAVA;AAAAA,4BAAwBA,MAAQA,cAAhCA;AAAAA,4BAA6CA,IAAIA,YAAjDA;AAAAA,4BAA4DA,IAAIA,YAAhEA;AAAAA,4BAChCA,IAAIA,CAD4BA;AAAAA,4BACzBA,IAAIA,CADqBA;AAAAA,4BAClBA,IAAIA,CADcA;AAAAA,4BACXA,IAAIA,CADOA;AAAAA,4BACJA,IAAIA,CADAA;AAAAA,4BACGA,IAAIA,CADPA;AAAAA,4BACUA,IAAIA,CADdA;AAAAA,4BACiBA,IAAIA,CADrBA;AAAAA,4BACwBA,IAAIA,CAD5BA;AAAAA,4BAC+BA,IAAIA,CADnCA;AAAAA,4BACsCA,IAAIA,CAD1CA;AAAAA,4BAC6CA,IAAIA,CADjDA;AAAAA,4BACoDA,IAAIA,CADxDA;AAAAA,4BAC2DA,IAAIA,CAD/DA;AAAAA,4BACkEA,IAAIA,CADtEA;AAAAA,4BACyEA,IAAIA,CAD7EA;AAAAA,4BACgFA,IAAIA,CADpFA;AAAAA,4BACuFA,IAAIA,CAD3FA;AAAAA,4BAC8FA,IAAIA,CADlGA;AAAAA,4BACqGA,IAAIA,CADzGA;AAAAA,4BAC4GA,IAAIA,CADhHA;AAAAA,4BACmHA,IAAIA,CADvHA;AAAAA,4BAC0HA,IAAIA,CAD9HA;AAAAA,4BACiIA,IAAIA,CADrIA;AAAAA,4BACwIA,IAAIA,CAD5IA;AAAAA,4BAC+IA,IAAIA,CADnJA;AAAAA,4BACsJA,IAAIA,CAD1JA;AAAAA,4BAC6JA,IAAIA,CADjKA;AAAAA,4BACoKA,IAAIA,CADxKA;AAAAA,4BAC2KA,IAAIA,CAD/KA;AAAAA,4BACkLA,IAAIA,CADtLA;AAAAA,4BACyLA,IAAIA,CAD7LA;AAAAA,4BACgMA,IAAIA,CADpMA;AAAAA,4BACuMA,IAAIA,CAD3MA;AAAAA,4BAC8MA,IAAIA,CADlNA;AAAAA,4BACqNA,IAAIA,CADzNA;AAAAA,4BAC4NA,IAAIA,CADhOA;AAAAA,4BACmOA,IAAIA,CADvOA;AAAAA,4BAC0OA,IAAIA,CAD9OA;AAAAA,4BACiPA,IAAIA,CADrPA;AAAAA,4BACwPA,KAAKA,CAD7PA;AAAAA,4BACgQA,KAAKA,CADrQA;AAAAA,4BACwQA,KAAKA,CAD7QA;AAAAA,4BACgRA,KAAKA,CADrRA;AAAAA,4BACwRA,KAAKA,CAD7RA;AAAAA,4BACgSA,KAAKA,CADrSA;AAAAA,4BACwSA,KAAKA,CAD7SA;AAAAA,4BACgTA,KAAKA,CADrTA;AAAAA,4BACwTA,KAAKA,CAD7TA;AAAAA,4BACgUA,KAAKA,CADrUA;AAAAA,4BACwUA,KAAKA,CAD7UA;AAAAA,4BACgVA,KAAKA,CADrVA;AAAAA,4BACwVA,KAAKA,CAD7VA;AAAAA,4BACgWA,KAAKA,CADrWA;AAAAA,4BACwWA,KAAKA,CAD7WA;AAAAA,4BACgXA,KAAKA,CADrXA;AAAAA,4BACwXA,KAAKA,CAD7XA;AAAAA,4BACgYA,KAAKA,CADrYA;AAAAA,4BACwYA,KAAKA,CAD7YA;AAAAA,4BACgZA,KAAKA,CADrZA;AAAAA,4BACwZA,KAAKA,CAD7ZA;AAAAA,4BACgaA,KAAKA,CADraA;AAAAA,4BACwaA,KAAKA,CAD7aA;AAAAA,yBAA1BA,CA1HRP;AAAAA,wBA6HQO,gBAAAA,CAAAA,yBAAAA,GAA4BA,quKAA5BA,CA7HRP;AAAAA,wBA+HQO,gBAAAA,CAAAA,oBAAAA,GAAuBA;AAAAA,4BAAEA,IAAIA,YAANA;AAAAA,4BAAiBA,IAAIA,YAArBA;AAAAA,4BAAgCA,IAAIA,YAApCA;AAAAA,4BAA+CA,IAAIA,CAAnDA;AAAAA,4BAAsDA,IAAIA,CAA1DA;AAAAA,4BAA6DA,IAAIA,CAAjEA;AAAAA,4BAAoEA,IAAIA,CAAxEA;AAAAA,4BAA2EA,IAAIA,CAA/EA;AAAAA,4BAAkFA,IAAIA,CAAtFA;AAAAA,4BAAyFA,IAAIA,CAA7FA;AAAAA,4BAAgGA,IAAIA,CAApGA;AAAAA,4BAAuGA,IAAIA,CAA3GA;AAAAA,4BAA8GA,IAAIA,CAAlHA;AAAAA,4BAAqHA,IAAIA,CAAzHA;AAAAA,4BAA4HA,IAAIA,CAAhIA;AAAAA,4BAAmIA,IAAIA,CAAvIA;AAAAA,4BAA0IA,IAAIA,CAA9IA;AAAAA,4BAAiJA,IAAIA,CAArJA;AAAAA,4BAAwJA,IAAIA,CAA5JA;AAAAA,4BAA+JA,IAAIA,CAAnKA;AAAAA,4BAAsKA,IAAIA,CAA1KA;AAAAA,4BAA6KA,IAAIA,CAAjLA;AAAAA,4BAAoLA,IAAIA,CAAxLA;AAAAA,4BAA2LA,IAAIA,CAA/LA;AAAAA,4BAAkMA,IAAIA,CAAtMA;AAAAA,4BAAyMA,IAAIA,CAA7MA;AAAAA,4BAAgNA,IAAIA,CAApNA;AAAAA,4BAAuNA,IAAIA,CAA3NA;AAAAA,4BAA8NA,IAAIA,CAAlOA;AAAAA,4BAAqOA,IAAIA,CAAzOA;AAAAA,4BAA4OA,IAAIA,CAAhPA;AAAAA,4BAAmPA,IAAIA,CAAvPA;AAAAA,4BAA0PA,KAAKA,CAA/PA;AAAAA,4BAAkQA,KAAKA,CAAvQA;AAAAA,4BAA0QA,KAAKA,CAA/QA;AAAAA,4BAAkRA,KAAKA,CAAvRA;AAAAA,4BAA0RA,KAAKA,CAA/RA;AAAAA,4BAAkSA,KAAKA,CAAvSA;AAAAA,4BAA0SA,KAAKA,CAA/SA;AAAAA,4BAAkTA,KAAKA,CAAvTA;AAAAA,4BAA0TA,KAAKA,CAA/TA;AAAAA,4BAAkUA,KAAKA,CAAvUA;AAAAA,4BAA0UA,KAAKA,CAA/UA;AAAAA,4BAAkVA,KAAKA,CAAvVA;AAAAA,4BAA0VA,KAAKA,CAA/VA;AAAAA,4BAAkWA,KAAKA,CAAvWA;AAAAA,4BAA0WA,KAAKA,CAA/WA;AAAAA,4BAAkXA,KAAKA,CAAvXA;AAAAA,4BAA0XA,KAAKA,CAA/XA;AAAAA,4BAAkYA,KAAKA,CAAvYA;AAAAA,4BAA0YA,KAAKA,CAA/YA;AAAAA,4BAAkZA,KAAKA,CAAvZA;AAAAA,4BAA0ZA,KAAKA,CAA/ZA;AAAAA,4BAAkaA,KAAKA,CAAvaA;AAAAA,4BAA0aA,KAAKA,CAA/aA;AAAAA,yBAAvBA,CA/HRP;AAAAA,wBAiIQO,gBAAAA,CAAAA,sBAAAA,GAAyBA,siIAAzBA,CAjIRP;AAAAA,wBAmIAO,OAAAA,gBAAAA,CAnIAP;AAAAA,qBAAAA,EAAAA,CAH2BP;AAAAA,oBAGdO,OAAAA,CAAAA,gBAAAA,GAAgBA,gBAAhBA,CAHcP;AAAAA,iBAARA,CAAAA,OAAAA,GAAAA,QAAAA,CAAAA,OAAAA,IAAAA,CAAAA,QAAAA,CAAAA,OAAAA,GAAOA,EAAPA,CAAAA,GAADD;AAAAA,aAARA,CAAAA,QAAAA,GAAAA,GAAAA,CAAAA,QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,GAAQA,EAARA,CAAAA,GAAD;AAAA,SAAV,CAAOA,GAAA,IAAA,CAAAA,GAAA,GAAG,EAAH,CAAP,G;QCGA;AAAA;AAAA;AAAA,YAAOA,GAAP,C;QAAA,CAAA,UAAOA,GAAP,EAAU;AAAA,YAACA,IAAAA,QAAAA,CAAD;AAAA,YAACA,CAAAA,UAAAA,QAAAA,EAAQA;AAAAA,gBAACC,IAAAA,OAAAA,CAADD;AAAAA,gBAACC,CAAAA,UAAAA,OAAAA,EAAQA;AAAAA,oBAE3BO,IAAIA,SAAAA,GAAYA,EAAhBA,CAF2BP;AAAAA,oBAG3BO,CAAAA,CAAEA,IAAFA,CAAOA,wBAAPA,EAAiCA,UAACA,OAADA,EAAQA;AAAAA,wBAExCA,SAAAA,CAAUA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,WAArBA,CAAiCA,OAAjCA,EAA0CA,CAA1CA,CAAVA,IAA0DA,IAA1DA,CAFwCA;AAAAA,qBAAzCA,EAH2BP;AAAAA,oBAQ3BO,IAAIA,MAAAA,GAASA,EAAbA,CAR2BP;AAAAA,oBAS3BO,CAAAA,CAAEA,IAAFA,CAAOA,YAAPA,EAAqBA,UAACA,OAADA,EAAQA;AAAAA,wBAC5BA,MAAAA,CAAOA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,WAArBA,CAAiCA,OAAjCA,EAA0CA,CAA1CA,CAAPA,IAAuDA,IAAvDA,CAD4BA;AAAAA,qBAA7BA,EAT2BP;AAAAA,oBAa3BO,IAAAA,WAAAA,GAAAA,YAAAA;AAAAA,wBAAAQ,SAAAA,WAAAA,GAAAA;AAAAA,yBAAAR;AAAAA,wBAEQQ,WAAAA,CAAAA,UAAAA,GAAPA,UAAkBA,CAAlBA,EAA2BA;AAAAA,4BAC1BC,OAAOA,SAAAA,CAAUA,CAAVA,CAAPA,CAD0BD;AAAAA,yBAApBA,CAFRR;AAAAA,wBAMQQ,WAAAA,CAAAA,OAAAA,GAAPA,UAAeA,CAAfA,EAAwBA;AAAAA,4BACvBE,OAAOA,MAAAA,CAAOA,CAAPA,CAAPA,CADuBF;AAAAA,yBAAjBA,CANRR;AAAAA,wBAUQQ,WAAAA,CAAAA,SAAAA,GAAPA,UAAiBA,GAAjBA,EAA4BA;AAAAA,4BAC3BG,OAAOA,OAAAA,CAAAA,gBAAAA,CAAiBA,EAAjBA,CAAoBA,GAApBA,CAAPA,CAD2BH;AAAAA,yBAArBA,CAVRR;AAAAA,wBAcQQ,WAAAA,CAAAA,gBAAAA,GAAPA,UAAwBA,CAAxBA,EAAiCA;AAAAA,4BAChCI,OAAOA,OAAAA,CAAAA,gBAAAA,CAAiBA,EAAjBA,CAAoBA,CAApBA,CAAPA,CADgCJ;AAAAA,yBAA1BA,CAdRR;AAAAA,wBAkBQQ,WAAAA,CAAAA,iBAAAA,GAAPA,UAAyBA,CAAzBA,EAAkCA;AAAAA,4BACjCK,OAAOA,WAAAA,CAAYA,oBAAZA,CAAiCA,CAAjCA,KACHA,WAAAA,CAAYA,qBAAZA,CAAkCA,CAAlCA,CADJA,CADiCL;AAAAA,yBAA3BA,CAlBRR;AAAAA,wBAuBQQ,WAAAA,CAAAA,gBAAAA,GAAPA,UAAwBA,CAAxBA,EAAiCA;AAAAA,4BAChCM,OAAOA,WAAAA,CAAYA,uBAAZA,CAAoCA,CAApCA,KACHA,WAAAA,CAAYA,wBAAZA,CAAqCA,CAArCA,CADJA,CADgCN;AAAAA,yBAA1BA,CAvBRR;AAAAA,wBA4BQQ,WAAAA,CAAAA,uBAAAA,GAAPA,UAA+BA,CAA/BA,EAAwCA;AAAAA,4BACvCO,OAAOA,OAAAA,CAAAA,gBAAAA,CAAiBA,uBAAjBA,CAAyCA,CAAzCA,CAAPA,CADuCP;AAAAA,yBAAjCA,CA5BRR;AAAAA,wBAgCQQ,WAAAA,CAAAA,wBAAAA,GAAPA,UAAgCA,CAAhCA,EAAyCA;AAAAA,4BACxCQ,OAAOA,CAAAA,GAAIA,OAAAA,CAAAA,gBAAAA,CAAiBA,0BAArBA,IACHA,OAAAA,CAAAA,gBAAAA,CAAiBA,yBAAjBA,CAA2CA,IAA3CA,CAAgDA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,aAArBA,CAAmCA,CAAnCA,CAAhDA,CADJA,CADwCR;AAAAA,yBAAlCA,CAhCRR;AAAAA,wBAqCQQ,WAAAA,CAAAA,oBAAAA,GAAPA,UAA4BA,CAA5BA,EAAqCA;AAAAA,4BACpCS,OAAOA,OAAAA,CAAAA,gBAAAA,CAAiBA,oBAAjBA,CAAsCA,CAAtCA,CAAPA,CADoCT;AAAAA,yBAA9BA,CArCRR;AAAAA,wBAyCQQ,WAAAA,CAAAA,qBAAAA,GAAPA,UAA6BA,CAA7BA,EAAsCA;AAAAA,4BACrCU,OAAOA,CAAAA,GAAIA,OAAAA,CAAAA,gBAAAA,CAAiBA,0BAArBA,IACHA,OAAAA,CAAAA,gBAAAA,CAAiBA,sBAAjBA,CAAwCA,IAAxCA,CAA6CA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,aAArBA,CAAmCA,CAAnCA,CAA7CA,CADJA,CADqCV;AAAAA,yBAA/BA,CAzCRR;AAAAA,wBA8CQQ,WAAAA,CAAAA,kBAAAA,GAAPA,UAA0BA,CAA1BA,EAAmCA;AAAAA,4BAClCW,OAAOA,OAAAA,CAAAA,gBAAAA,CAAiBA,UAAjBA,CAA4BA,CAA5BA,CAAPA,CADkCX;AAAAA,yBAA5BA,CA9CRR;AAAAA,wBAkDAQ,OAAAA,WAAAA,CAlDAR;AAAAA,qBAAAA,EAAAA,CAb2BP;AAAAA,oBAadO,OAAAA,CAAAA,WAAAA,GAAWA,WAAXA,CAbcP;AAAAA,iBAARA,CAAAA,OAAAA,GAAAA,QAAAA,CAAAA,OAAAA,IAAAA,CAAAA,QAAAA,CAAAA,OAAAA,GAAOA,EAAPA,CAAAA,GAADD;AAAAA,aAARA,CAAAA,QAAAA,GAAAA,GAAAA,CAAAA,QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,GAAQA,EAARA,CAAAA,GAAD;AAAA,SAAV,CAAOA,GAAA,IAAA,CAAAA,GAAA,GAAG,EAAH,CAAP,G;QCGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAOA,GAAP,C;QAAA,CAAA,UAAOA,GAAP,EAAU;AAAA,YAACA,IAAAA,QAAAA,CAAD;AAAA,YAACA,CAAAA,UAAAA,QAAAA,EAAQA;AAAAA,gBAACC,IAAAA,OAAAA,CAADD;AAAAA,gBAACC,CAAAA,UAAAA,OAAAA,EAAQA;AAAAA,oBAE3BO,IAAMA,MAAAA,GAASA;AAAAA,wBACdA,UAAAA,EAAYA,iBADEA;AAAAA,wBAEdA,WAAAA,EAAaA,kBAFCA;AAAAA,wBAGdA,YAAAA,EAAcA,mBAHAA;AAAAA,wBAIdA,aAAAA,EAAeA,oBAJDA;AAAAA,wBAKdA,YAAAA,EAAcA,mBALAA;AAAAA,wBAMdA,WAAAA,EAAaA,kBANCA;AAAAA,wBAOdA,KAAAA,EAAOA,YAPOA;AAAAA,wBAQdA,MAAAA,EAAQA,aARMA;AAAAA,wBASdA,IAAAA,EAAMA,WATQA;AAAAA,qBAAfA,CAF2BP;AAAAA,oBAc3BO,IAAMA,WAAAA,GAAcA;AAAAA,wBACnBA,OAAAA,EAASA,SADUA;AAAAA,wBAEnBA,UAAAA,EAAYA,YAFOA;AAAAA,wBAGnBA,OAAAA,EAASA,SAHUA;AAAAA,wBAInBA,WAAAA,EAAaA,aAJMA;AAAAA,wBAKnBA,OAAAA,EAASA,SALUA;AAAAA,qBAApBA,CAd2BP;AAAAA,oBAsB3BO,IAAMA,GAAAA,GAAMA,OAAAA,CAAAA,gBAAAA,CAAiBA,UAA7BA,CAtB2BP;AAAAA,oBAwB3BO,IAAAA,KAAAA,GAAAA,YAAAA;AAAAA,wBAqGCoB,SAAAA,KAAAA,CAAoBA,UAApBA,EAA0DA,gBAA1DA,EAA4FA;AAAAA,4BAAxEC,KAAAA,UAAAA,GAAAA,UAAAA,CAAwED;AAAAA,4BAAlCC,KAAAA,gBAAAA,GAAAA,gBAAAA,CAAkCD;AAAAA,4BAC3FC,KAAKA,MAALA,GAAcA,CAAdA,CAD2FD;AAAAA,4BAE3FC,KAAKA,cAALA,GAAsBA,CAAtBA,CAF2FD;AAAAA,4BAI3FC,KAAAA,CAAMA,2BAANA,GAJ2FD;AAAAA,yBArG7FpB;AAAAA,wBAWgBoB,KAAAA,CAAAA,2BAAAA,GAAfA,YAAAA;AAAAA,4BACCE,IAAIA,KAAAA,CAAMA,eAAVA,EAA2BA;AAAAA,gCAC1BA,OAD0BA;AAAAA,6BAD5BF;AAAAA,4BAICE,IAAIA,MAAAA,GAASA,KAAAA,CAAMA,eAANA,GAAwBA,EAArCA,CAJDF;AAAAA,4BAOCE;AAAAA,4BAAAA,CAAAA,CAAEA,IAAFA,CAAYA,OAAAA,CAAAA,gBAAAA,CAAiBA,EAA7BA,EAAiCA,UAACA,GAADA,EAAMA,GAANA,EAAiBA;AAAAA,gCAAKA,OAAAA,MAAAA,CAAOA,GAAPA,IAAcA,KAAAA,CAAMA,SAANA,CAAgBA,eAA9BA,CAALA;AAAAA,6BAAlDA,EAPDF;AAAAA,4BAUCE;AAAAA,4BAAAA,CAAAA,CAAEA,IAAFA,CAAYA,OAAAA,CAAAA,gBAAAA,CAAiBA,EAA7BA,EAAiCA,UAACA,GAADA,EAAMA,GAANA,EAAiBA;AAAAA,gCAAKA,OAAAA,MAAAA,CAAOA,GAAPA,IAAcA,KAAAA,CAAMA,SAANA,CAAgBA,mBAA9BA,CAALA;AAAAA,6BAAlDA,EAVDF;AAAAA,4BAaCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,KAAXA,IAAoBA,KAAAA,CAAMA,cAANA,CAAqBA,GAAAA,CAAIA,KAAzBA,CAApBA,CAbDF;AAAAA,4BAcCE,MAAAA,CAAOA,GAAAA,CAAIA,UAAXA,IAAyBA,KAAAA,CAAMA,cAANA,CAAqBA,GAAAA,CAAIA,UAAzBA,CAAzBA,CAdDF;AAAAA,4BAiBCE;AAAAA,4BAAAA,CAAAA,CAAEA,IAAFA,CAAOA,YAAPA,EAAqBA,UAACA,OAADA,EAAQA;AAAAA,gCAC5BA,MAAAA,CAAOA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,WAArBA,CAAiCA,OAAjCA,EAA0CA,CAA1CA,CAAPA,IAAuDA,KAAAA,CAAMA,SAANA,CAAgBA,WAAvEA,CAD4BA;AAAAA,6BAA7BA,EAjBDF;AAAAA,4BAqBCE,MAAAA,CAAOA,GAAAA,CAAIA,MAAXA,IAAqBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAArCA,CArBDF;AAAAA,4BAsBCE,MAAAA,CAAOA,GAAAA,CAAIA,MAAXA,IAAqBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAArCA,CAtBDF;AAAAA,4BAuBCE,MAAAA,CAAOA,GAAAA,CAAIA,QAAXA,IAAuBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAAvCA,CAvBDF;AAAAA,4BAwBCE,MAAAA,CAAOA,GAAAA,CAAIA,QAAXA,IAAuBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAAvCA,CAxBDF;AAAAA,4BAyBCE,MAAAA,CAAOA,GAAAA,CAAIA,QAAXA,IAAuBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAAvCA,CAzBDF;AAAAA,4BA0BCE,MAAAA,CAAOA,GAAAA,CAAIA,QAAXA,IAAuBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAAvCA,CA1BDF;AAAAA,4BA6BCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,GAAXA,IAAkBA,YAAAA;AAAAA,gCAAMA,OAAAA,MAAAA,CAAOA,WAAPA,CAANA;AAAAA,6BAAlBA,CA7BDF;AAAAA,4BA+BCE,MAAAA,CAAOA,GAAAA,CAAIA,SAAXA,IAAwBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAAxCA,CA/BDF;AAAAA,4BAgCCE,MAAAA,CAAOA,GAAAA,CAAIA,KAAXA,IAAoBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAApCA,CAhCDF;AAAAA,4BAmCCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,IAAXA,IAAmBA,KAAAA,CAAMA,qBAANA,CAClBA;AAAAA,gCAACA,CAACA,GAAAA,CAAIA,IAALA,CAADA;AAAAA,gCAAaA,CAACA,GAAAA,CAAIA,MAALA,CAAbA;AAAAA,gCAA2BA;AAAAA,oCAACA,GAAAA,CAAIA,IAALA;AAAAA,oCAAWA,GAAAA,CAAIA,IAAfA;AAAAA,iCAA3BA;AAAAA,gCAAiDA;AAAAA,oCAACA,GAAAA,CAAIA,IAALA;AAAAA,oCAAWA,GAAAA,CAAIA,MAAfA;AAAAA,iCAAjDA;AAAAA,6BADkBA,CAAnBA,CAnCDF;AAAAA,4BAuCCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,IAAXA,IAAmBA,KAAAA,CAAMA,qBAANA,CAClBA;AAAAA,gCAACA,CAACA,GAAAA,CAAIA,IAALA,CAADA;AAAAA,gCAAaA,CAACA,GAAAA,CAAIA,MAALA,CAAbA;AAAAA,gCAA2BA;AAAAA,oCAACA,GAAAA,CAAIA,IAALA;AAAAA,oCAAWA,GAAAA,CAAIA,IAAfA;AAAAA,iCAA3BA;AAAAA,gCAAiDA;AAAAA,oCAACA,GAAAA,CAAIA,IAALA;AAAAA,oCAAWA,GAAAA,CAAIA,MAAfA;AAAAA,iCAAjDA;AAAAA,gCAAyEA;AAAAA,oCAACA,GAAAA,CAAIA,IAALA;AAAAA,oCAAWA,GAAAA,CAAIA,IAAfA;AAAAA,oCAAqBA,GAAAA,CAAIA,MAAzBA;AAAAA,iCAAzEA;AAAAA,6BADkBA,CAAnBA,CAvCDF;AAAAA,4BA2CCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,IAAXA,IAAmBA,KAAAA,CAAMA,qBAANA,CAClBA;AAAAA,gCAACA,CAACA,GAAAA,CAAIA,MAALA,CAADA;AAAAA,gCAAeA;AAAAA,oCAACA,GAAAA,CAAIA,MAALA;AAAAA,oCAAaA,GAAAA,CAAIA,MAAjBA;AAAAA,iCAAfA;AAAAA,6BADkBA,CAAnBA,CA3CDF;AAAAA,4BA+CCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,KAAXA,IAAoBA,KAAAA,CAAMA,qBAANA,CACnBA;AAAAA,gCAACA,CAACA,GAAAA,CAAIA,KAALA,CAADA;AAAAA,gCAAcA,CAACA,GAAAA,CAAIA,MAALA,CAAdA;AAAAA,6BADmBA,CAApBA,CA/CDF;AAAAA,4BAmDCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,IAAXA,IAAmBA,KAAAA,CAAMA,qBAANA,CAClBA;AAAAA,gCAACA,CAACA,GAAAA,CAAIA,IAALA,CAADA;AAAAA,gCAAaA,CAACA,GAAAA,CAAIA,MAALA,CAAbA;AAAAA,6BADkBA,CAAnBA,CAnDDF;AAAAA,4BAuDCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,OAAXA,IAAsBA,KAAAA,CAAMA,qBAANA,CACrBA,CAACA,CAACA,GAAAA,CAAIA,MAALA,CAADA,CADqBA,CAAtBA,CAvDDF;AAAAA,4BA2DCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,SAAXA,IAAwBA,KAAAA,CAAMA,qBAANA,CACvBA;AAAAA,gCAACA,CAACA,GAAAA,CAAIA,SAALA,CAADA;AAAAA,gCAAkBA,CAACA,GAAAA,CAAIA,MAALA,CAAlBA;AAAAA,6BADuBA,CAAxBA,CA3DDF;AAAAA,4BA+DCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,QAAXA,IAAuBA,KAAAA,CAAMA,qBAANA,CACtBA;AAAAA,gCAACA,CAACA,GAAAA,CAAIA,QAALA,CAADA;AAAAA,gCAAiBA,CAACA,GAAAA,CAAIA,MAALA,CAAjBA;AAAAA,6BADsBA,CAAvBA,CA/DDF;AAAAA,4BAmECE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,QAAXA,IAAuBA,KAAAA,CAAMA,qBAANA,CACtBA,CAACA,CAACA,GAAAA,CAAIA,MAALA,CAADA,CADsBA,CAAvBA,CAnEDF;AAAAA,4BAuECE,MAAAA,CAAOA,GAAAA,CAAIA,KAAXA,IAAoBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAApCA,CAvEDF;AAAAA,4BAwECE,MAAAA,CAAOA,GAAAA,CAAIA,KAAXA,IAAoBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAApCA,CAxEDF;AAAAA,4BAyECE,MAAAA,CAAOA,GAAAA,CAAIA,KAAXA,IAAoBA,KAAAA,CAAMA,SAANA,CAAgBA,sBAApCA,CAzEDF;AAAAA,4BA2ECE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,MAAXA,IAAqBA,KAAAA,CAAMA,qBAANA,CACpBA;AAAAA,gCAACA,CAACA,GAAAA,CAAIA,MAALA,CAADA;AAAAA,gCAAeA;AAAAA,oCAACA,GAAAA,CAAIA,MAALA;AAAAA,oCAAaA,GAAAA,CAAIA,MAAjBA;AAAAA,iCAAfA;AAAAA,6BADoBA,CAArBA,CA3EDF;AAAAA,4BA+ECE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,QAAXA,IAAuBA,KAAAA,CAAMA,qBAANA,CACtBA,CAACA,CAACA,GAAAA,CAAIA,MAALA,CAADA,CADsBA,CAAvBA,CA/EDF;AAAAA,4BAoFCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,KAAXA,IAAoBA,YAAAA;AAAAA,gCAAMA,OAAAA,MAAAA,CAAOA,YAAPA,CAANA;AAAAA,6BAApBA,CApFDF;AAAAA,4BAuFCE;AAAAA,4BAAAA,MAAAA,CAAOA,GAAAA,CAAIA,SAAXA,IAAwBA,YAAAA;AAAAA,gCAAMA,OAAAA,MAAAA,CAAOA,UAAPA,CAANA;AAAAA,6BAAxBA,CAvFDF;AAAAA,yBAAeA,CAXhBpB;AAAAA,wBA4GCoB,KAAAA,CAAAA,SAAAA,CAAAA,YAAAA,GAAAA,YAAAA;AAAAA,4BACCG,IAAIA,SAAAA,GAAYA,KAAKA,SAALA,EAAhBA,CADDH;AAAAA,4BAECG,OAAOA,SAAPA,EAAkBA;AAAAA,gCACjBA,SAAAA,GAAYA,KAAKA,SAALA,EAAgBA,IAAhBA,CAAqBA,IAArBA,CAAZA,CADiBA;AAAAA,6BAFnBH;AAAAA,4BAKCG,OAAOA,KAAKA,KAAZA,CALDH;AAAAA,yBAAAA,CA5GDpB;AAAAA,wBAuHSoB;AAAAA;AAAAA,wBAAAA,KAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAARA,YAAAA;AAAAA,yBAAQA,CAvHTpB;AAAAA,wBAyHSoB,KAAAA,CAAAA,SAAAA,CAAAA,UAAAA,GAARA,YAAAA;AAAAA,yBAAQA,CAzHTpB;AAAAA,wBA+HSoB;AAAAA;AAAAA;AAAAA,wBAAAA,KAAAA,CAAAA,SAAAA,CAAAA,SAAAA,GAARA,YAAAA;AAAAA,4BAECI;AAAAA,iCAAKA,KAALA,GAAaA,SAAbA,CAFDJ;AAAAA,4BAKCI;AAAAA,iCAAKA,WAALA,GAAmBA,KAAKA,MAAxBA,CALDJ;AAAAA,4BAMCI,KAAKA,mBAALA,GAA2BA,KAAKA,UAALA,CAAgBA,SAAhBA,KAA8BA,KAAKA,cAA9DA,CANDJ;AAAAA,4BAOCI,KAAKA,mBAALA,GAA2BA,KAAKA,UAALA,CAAgBA,SAAhBA,EAA3BA,CAPDJ;AAAAA,4BASCI,IAAIA,SAAJA,EACCA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EADRA,CATDJ;AAAAA,4BAYCI,IAAIA,OAAAA,CAAAA,WAAAA,CAAYA,iBAAZA,CAA8BA,IAA9BA,CAAJA,EAAyCA;AAAAA,gCACxCA,KAAKA,UAALA,CAAgBA,SAAhBA,GADwCA;AAAAA,gCAExCA,SAAAA,GAAYA,MAAAA,CAAOA,UAAnBA,CAFwCA;AAAAA,6BAAzCA,MAGOA;AAAAA,gCACNA,IAAIA,iBAAAA,GAAkCA,KAAAA,CAAMA,eAANA,CAAsBA,IAAtBA,CAAtCA,CADMA;AAAAA,gCAENA,IAAIA,iBAAJA,EAAuBA;AAAAA,oCACtBA,KAAKA,UAALA,CAAgBA,SAAhBA,GADsBA;AAAAA,oCAEtBA,SAAAA,GAAYA,iBAAAA,CAAkBA,IAAlBA,CAAuBA,IAAvBA,CAAZA,CAFsBA;AAAAA,iCAAvBA,MAIKA,IAAIA,IAAAA,KAASA,SAAbA,EAAwBA;AAAAA,oCAC5BA,KAAKA,gBAALA,CAAsBA,YAAtBA,CACCA,uBAAwBA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,aAArBA,CAAmCA,IAAnCA,CAAxBA,GAAmEA,GADpEA,EAECA,KAAKA,MAFNA,EAGCA,KAAKA,UAALA,CAAgBA,SAAhBA,EAHDA,EAD4BA;AAAAA,oCAM5BA,SAAAA,GAAYA,MAAAA,CAAOA,KAAnBA,CAN4BA;AAAAA,iCANvBA;AAAAA,6BAfRJ;AAAAA,4BA+BCI,OAAOA,SAAPA,CA/BDJ;AAAAA,yBAAQA,CA/HTpB;AAAAA,wBAiKSoB,KAAAA,CAAAA,SAAAA,CAAAA,eAAAA,GAARA,YAAAA;AAAAA,4BACCK,IAAIA,OAAAA,GAA0CA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,kCAArBA,EAA9CA,EACCA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EADRA,CADDL;AAAAA,4BAICK,IAAIA,CAACA,KAAKA,yBAALA,CAA+BA,OAA/BA,EAAwCA,IAAxCA,CAALA,EAAoDA;AAAAA,gCACnDA,KAAKA,gBAALA,CAAsBA,YAAtBA,CAAmCA,EAAnCA,EAAuCA,KAAKA,MAA5CA,EAAoDA,KAAKA,UAALA,CAAgBA,SAAhBA,EAApDA,EADmDA;AAAAA,gCAEnDA,OAAOA,MAAAA,CAAOA,KAAdA,CAFmDA;AAAAA,6BAJrDL;AAAAA,4BAQCK,OAAOA,IAAPA,EAAaA;AAAAA,gCACZA,IAAIA,MAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAXA,CADYA;AAAAA,gCAEZA,IAAIA,OAAAA,CAAAA,WAAAA,CAAYA,gBAAZA,CAA6BA,MAA7BA,CAAJA,EAAwCA;AAAAA,oCACvCA,IAAIA,CAACA,KAAKA,yBAALA,CAA+BA,OAA/BA,EAAwCA,MAAxCA,CAALA,EAAoDA;AAAAA,wCACnDA,KAAKA,gBAALA,CAAsBA,YAAtBA,CAAmCA,EAAnCA,EAAuCA,KAAKA,MAA5CA,EAAoDA,KAAKA,UAALA,CAAgBA,SAAhBA,EAApDA,EADmDA;AAAAA,wCAEnDA,OAAOA,MAAAA,CAAOA,KAAdA,CAFmDA;AAAAA,qCADbA;AAAAA,iCAAxCA,MAMKA;AAAAA,oCACJA,IAAIA,MAAAA,KAASA,SAAbA,EAAwBA;AAAAA,wCACvBA,KAAKA,UAALA,CAAgBA,SAAhBA,GADuBA;AAAAA,qCADpBA;AAAAA,oCAIJA,MAJIA;AAAAA,iCAROA;AAAAA,6BARdL;AAAAA,4BAuBCK,IAAIA,IAAJA,EACCA,OADDA,EAECA,GAAAA,GAAWA,OAAAA,CAAQA,SAARA,EAFZA,CAvBDL;AAAAA,4BA0BCK,IAAIA,OAAAA,CAAAA,WAAAA,CAAYA,SAAZA,CAAsBA,GAAtBA,CAAJA,EAAgCA;AAAAA,gCAC/BA,IAAAA,GAAOA,WAAAA,CAAYA,OAAnBA,CAD+BA;AAAAA,6BAAhCA,MAGKA;AAAAA,gCACJA,QAAQA,GAARA;AAAAA,gCACCA,KAAKA,MAALA;AAAAA,oCACCA,IAAAA,GAAOA,WAAAA,CAAYA,OAAnBA,CADDA;AAAAA,oCAECA,OAAAA,GAAUA,MAAVA,CAFDA;AAAAA,oCAGCA,GAAAA,GAAMA,IAANA,CAHDA;AAAAA,oCAICA,MALFA;AAAAA,gCAMCA,KAAKA,MAALA;AAAAA,oCACCA,IAAAA,GAAOA,WAAAA,CAAYA,OAAnBA,CADDA;AAAAA,oCAECA,OAAAA,GAAUA,SAAVA,CAFDA;AAAAA,oCAGCA,GAAAA,GAAMA,IAANA,CAHDA;AAAAA,oCAICA,MAVFA;AAAAA,gCAWCA,KAAKA,OAALA;AAAAA,oCACCA,IAAAA,GAAOA,WAAAA,CAAYA,OAAnBA,CADDA;AAAAA,oCAECA,OAAAA,GAAUA,SAAVA,CAFDA;AAAAA,oCAGCA,GAAAA,GAAMA,KAANA,CAHDA;AAAAA,oCAICA,MAfFA;AAAAA,gCAgBCA;AAAAA,oCACCA,IAAAA,GAAOA,WAAAA,CAAYA,UAAnBA,CAjBFA;AAAAA,iCADIA;AAAAA,6BA7BNL;AAAAA,4BAkDCK,KAAKA,KAALA,GAAaA,KAAKA,WAALA,CAAiBA,IAAjBA,EAAuBA,GAAvBA,EAA4BA,OAA5BA,CAAbA,CAlDDL;AAAAA,4BAmDCK,OAAOA,MAAAA,CAAOA,MAAdA,CAnDDL;AAAAA,yBAAQA,CAjKTpB;AAAAA,wBAuNgBoB,KAAAA,CAAAA,cAAAA,GAAfA,UAA8BA,oBAA9BA,EAA0DA;AAAAA,4BAUzDM;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,mCAAOA,YAAAA;AAAAA,gCACN,KAAKC,UAAL,CAAgBC,WAAhB,GADMF;AAAAA,gCAEN,IAAIG,OAAA,GAA0CC,QAAA,CAAAC,SAAA,CAAUC,UAAV,CAAqBC,kCAArB,EAA9C,CAFMP;AAAAA,gCAGN,OAAO,IAAP,EAAa;AAAA,oCACZ,IAAIQ,IAAA,GAAO,KAAKP,UAAL,CAAgBC,WAAhB,EAAX,CADY;AAAA,oCAEZ,IAAIM,IAAA,KAASC,oBAAb,EAAmC;AAAA,wCAClC,MADkC;AAAA,qCAAnC,MAEO,IAAID,IAAA,KAASE,GAAA,CAAIC,SAAjB,EAA4B;AAAA,wCAClCH,IAAA,GAAO,KAAKP,UAAL,CAAgBC,WAAhB,EAAP,CADkC;AAAA,wCAElC,QAAQM,IAAR;AAAA,wCACC,KAAKE,GAAA,CAAIE,CAAT;AAAA,4CAAYT,OAAA,CAAQU,YAAR,CAAqB,CAArB,EAAZ;AAAA,4CAAqC,MADtC;AAAA,wCAEC,KAAKH,GAAA,CAAII,CAAT;AAAA,4CAAYX,OAAA,CAAQU,YAAR,CAAqB,EAArB,EAAZ;AAAA,4CAAsC,MAFvC;AAAA,wCAGC,KAAKH,GAAA,CAAIK,CAAT;AAAA,4CAAYZ,OAAA,CAAQU,YAAR,CAAqB,EAArB,EAAZ;AAAA,4CAAsC,MAHvC;AAAA,wCAIC,KAAKH,GAAA,CAAIM,CAAT;AAAA,4CAAYb,OAAA,CAAQU,YAAR,CAAqB,EAArB,EAAZ;AAAA,4CAAsC,MAJvC;AAAA,wCAKC,KAAKH,GAAA,CAAIO,CAAT;AAAA,4CAAYd,OAAA,CAAQU,YAAR,CAAqB,CAArB,EAAZ;AAAA,4CAAqC,MALtC;AAAA,wCAMC,KAAKH,GAAA,CAAIQ,CAAT;AAAA,4CAAYf,OAAA,CAAQU,YAAR,CAAqB,EAArB,EAAZ;AAAA,4CAAsC,MANvC;AAAA,wCAQC,KAAKH,GAAA,CAAIS,CAAT;AAAA,4CACC,IAAI,CAAC,KAAKC,mBAAL,CAAyB,CAAzB,EAA4BjB,OAA5B,CAAL,EAA2C;AAAA,gDAC1C,OAAOkB,MAAA,CAAOC,KAAd,CAD0C;AAAA,6CAD5C;AAAA,4CAIC,MAZF;AAAA,wCAaC,KAAKZ,GAAA,CAAIa,CAAT;AAAA,4CACC,IAAI,CAAC,KAAKH,mBAAL,CAAyB,CAAzB,EAA4BjB,OAA5B,CAAL,EAA2C;AAAA,gDAC1C,OAAOkB,MAAA,CAAOC,KAAd,CAD0C;AAAA,6CAD5C;AAAA,4CAIC,MAjBF;AAAA,wCAkBC,SAAS;AAAA,gDACR,IAAIE,OAAA,CAAAC,WAAA,CAAYC,gBAAZ,CAA6BlB,IAA7B,CAAJ,EAAwC;AAAA,oDACvCL,OAAA,CAAQU,YAAR,CAAqBL,IAArB,EADuC;AAAA,oDAEvC,KAAKmB,aAAL,GAFuC;AAAA,iDADhC;AAAA,6CAlBV;AAAA,yCAFkC;AAAA,qCAA5B,MA4BF,IAAInB,IAAA,KAASoB,SAAb,EAAwB;AAAA,wCAC5B,KAAKC,gBAAL,CAAsBC,YAAtB,CAAmC,iBAAnC,EAAsD,KAAKC,MAA3D,EAAmE,KAAK9B,UAAL,CAAgB+B,SAAhB,EAAnE,EAD4B;AAAA,wCAE5B,OAAOX,MAAA,CAAOC,KAAd,CAF4B;AAAA,qCAAxB,MAIA;AAAA,wCACJnB,OAAA,CAAQU,YAAR,CAAqBL,IAArB,EADI;AAAA,qCApCO;AAAA,iCAHPR;AAAAA,gCA2CN,KAAKiC,KAAL,GAAa,KAAKC,WAAL,CAAiBC,WAAA,CAAYC,OAA7B,EAAsCjC,OAAA,CAAQkC,SAAR,EAAtC,EAA2D,QAA3D,CAAb,CA3CMrC;AAAAA,gCA4CN,OAAOqB,MAAA,CAAOiB,MAAd,CA5CMtC;AAAAA,6BAAPA,CAVyDN;AAAAA,yBAA3CA,CAvNhBpB;AAAAA,wBAiRSoB,KAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAARA,YAAAA;AAAAA,4BACC6C,IAAIA,GAAAA,GAAMA,KAAKA,UAALA,EAAVA,EACCA,KAAAA,GAAQA,GAAAA,CAAIA,MADbA,CADD7C;AAAAA,4BAGC6C,IAAIA,KAAKA,UAALA,CAAgBA,KAAhBA,CAAsBA,GAAAA,CAAIA,GAA1BA,CAAJA,EAAoCA;AAAAA,gCACnCA,IAAIA,OAAAA,GAAUA,KAAKA,WAALA,EAAdA,CADmCA;AAAAA,gCAEnCA,IAAIA,OAAAA,KAAYA,SAAhBA,EAA2BA;AAAAA,oCAC1BA,GAAAA,GAAMA,GAAAA,CAAIA,MAAJA,CAAWA,OAAXA,CAANA,CAD0BA;AAAAA,iCAFQA;AAAAA,6BAHrC7C;AAAAA,4BASC6C,OAAOA,KAAKA,8BAALA,CAAoCA,GAApCA,EAAyCA,KAAzCA,CAAPA,CATD7C;AAAAA,yBAAQA,CAjRTpB;AAAAA,wBA6RSoB,KAAAA,CAAAA,SAAAA,CAAAA,gBAAAA,GAARA,YAAAA;AAAAA,4BACC8C,KAAKA,UAALA,CAAgBA,SAAhBA,GADD9C;AAAAA,4BAEC8C,IAAIA,OAAAA,GAAUA,KAAKA,WAALA,EAAdA,CAFD9C;AAAAA,4BAGC8C,IAAIA,OAAAA,KAAYA,SAAhBA,EAA2BA;AAAAA,gCAC1BA,OAAOA,KAAKA,8BAALA,CAAoCA,OAApCA,EAA6CA,CAA7CA,CAAPA,CAD0BA;AAAAA,6BAA3BA,MAEOA;AAAAA,gCACNA,KAAKA,UAALA,CAAgBA,SAAhBA,GADMA;AAAAA,gCAENA,OAAOA,KAAKA,sBAALA,EAAPA,CAFMA;AAAAA,6BALR9C;AAAAA,yBAAQA,CA7RTpB;AAAAA,wBAwSSoB,KAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,GAARA,YAAAA;AAAAA,4BACC+C,KAAKA,UAALA,CAAgBA,SAAhBA,GADD/C;AAAAA,4BAEC+C,IAAIA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAXA,CAFD/C;AAAAA,4BAGC+C,QAAQA,IAARA;AAAAA,4BACCA,KAAKA,GAAAA,CAAIA,KAATA;AAAAA,gCACCA,OAAOA,MAAAA,CAAOA,aAAdA,CADDA;AAAAA,gCAECA,MAHFA;AAAAA,4BAICA,KAAKA,GAAAA,CAAIA,QAATA;AAAAA,gCACCA,OAAOA,MAAAA,CAAOA,YAAdA,CADDA;AAAAA,gCAECA,MANFA;AAAAA,4BAOCA,KAAKA,GAAAA,CAAIA,MAATA;AAAAA,gCACCA,MARFA;AAAAA,4BASCA;AAAAA,gCACCA,KAAKA,UAALA,CAAgBA,SAAhBA,GAVFA;AAAAA,6BAHD/C;AAAAA,4BAeC+C,KAAKA,UAALA,CAAgBA,SAAhBA,GAfD/C;AAAAA,4BAgBC+C,OAAOA,KAAKA,sBAALA,EAAPA,CAhBD/C;AAAAA,yBAAQA,CAxSTpB;AAAAA,wBA2TSoB,KAAAA,CAAAA,SAAAA,CAAAA,sBAAAA,GAARA,YAAAA;AAAAA,4BACCgD,KAAKA,UAALA,CAAgBA,SAAhBA,GADDhD;AAAAA,4BAECgD,KAAKA,KAALA,GAAaA,KAAKA,kBAALA,CAAwBA,WAAAA,CAAYA,WAApCA,CAAbA,CAFDhD;AAAAA,4BAGCgD,OAAOA,MAAAA,CAAOA,MAAdA,CAHDhD;AAAAA,yBAAQA,CA3TTpB;AAAAA,wBAiUSoB,KAAAA,CAAAA,SAAAA,CAAAA,eAAAA,GAARA,YAAAA;AAAAA,4BACCiD,KAAKA,UAALA,CAAgBA,SAAhBA,GADDjD;AAAAA,4BAECiD,OAAOA,MAAAA,CAAOA,IAAdA,CAFDjD;AAAAA,yBAAQA,CAjUTpB;AAAAA,wBAsUSoB,KAAAA,CAAAA,SAAAA,CAAAA,mBAAAA,GAARA,YAAAA;AAAAA,4BACCkD,KAAKA,UAALA,CAAgBA,SAAhBA,GADDlD;AAAAA,4BAECkD,KAAKA,UAALA,CAAgBA,YAAhBA,CAA6BA,UAAAA,IAAAA,EAAIA;AAAAA,gCAAIA,OAAAA,IAAAA,KAASA,GAAAA,CAAIA,EAAbA,IAAmBA,IAAAA,KAASA,SAA5BA,CAAJA;AAAAA,6BAAjCA,EAFDlD;AAAAA,4BAGCkD,KAAKA,aAALA,GAHDlD;AAAAA,4BAICkD,OAAOA,MAAAA,CAAOA,IAAdA,CAJDlD;AAAAA,yBAAQA,CAtUTpB;AAAAA,wBA6USoB,KAAAA,CAAAA,SAAAA,CAAAA,kBAAAA,GAARA,YAAAA;AAAAA,4BACCmD,GAAGA;AAAAA,gCACFA,IAAIA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAXA,CADEA;AAAAA,gCAEFA,IAAIA,OAAAA,CAAAA,WAAAA,CAAYA,gBAAZA,CAA6BA,IAA7BA,CAAJA,EAAwCA;AAAAA,oCACvCA,KAAKA,aAALA,GADuCA;AAAAA,oCAEvCA,MAFuCA;AAAAA,iCAFtCA;AAAAA,6BAAHA,QAMSA,IAAAA,KAASA,SANlBA,EADDnD;AAAAA,4BAQCmD,KAAKA,KAALA,GAAaA,KAAKA,kBAALA,CAAwBA,WAAAA,CAAYA,OAApCA,CAAbA,CARDnD;AAAAA,4BASCmD,OAAOA,MAAAA,CAAOA,MAAdA,CATDnD;AAAAA,yBAAQA,CA7UTpB;AAAAA,wBAyVSoB,KAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,GAARA,YAAAA;AAAAA,4BACCoD,OAAOA,IAAPA,EAAaA;AAAAA,gCACZA,IAAIA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAXA,CADYA;AAAAA,gCAEZA,IAAIA,IAAAA,KAASA,GAAAA,CAAIA,QAAjBA,EAA2BA;AAAAA,oCAC1BA,IAAIA,KAAKA,UAALA,CAAgBA,KAAhBA,CAAsBA,GAAAA,CAAIA,KAA1BA,CAAJA,EAAsCA;AAAAA,wCACrCA,MADqCA;AAAAA,qCADZA;AAAAA,iCAFfA;AAAAA,gCAOZA,IAAIA,IAAAA,KAASA,SAAbA,EAAwBA;AAAAA,oCACvBA,KAAKA,gBAALA,CAAsBA,YAAtBA,CAAmCA,kBAAnCA,EAAuDA,KAAKA,MAA5DA,EAAoEA,KAAKA,UAALA,CAAgBA,SAAhBA,EAApEA,EADuBA;AAAAA,oCAEvBA,OAAOA,MAAAA,CAAOA,KAAdA,CAFuBA;AAAAA,iCAAxBA,MAIKA,IAAIA,OAAAA,CAAAA,WAAAA,CAAYA,gBAAZA,CAA6BA,IAA7BA,CAAJA,EAAwCA;AAAAA,oCAC5CA,KAAKA,aAALA,GAD4CA;AAAAA,iCAXjCA;AAAAA,6BADdpD;AAAAA,4BAgBCoD,KAAKA,KAALA,GAAaA,KAAKA,kBAALA,CAAwBA,WAAAA,CAAYA,OAApCA,CAAbA,CAhBDpD;AAAAA,4BAiBCoD,OAAOA,MAAAA,CAAOA,MAAdA,CAjBDpD;AAAAA,yBAAQA,CAzVTpB;AAAAA,wBA6WSoB,KAAAA,CAAAA,SAAAA,CAAAA,yBAAAA,GAARA,UAAkCA,OAAlCA,EAA2EA,IAA3EA,EAAuFA;AAAAA,4BACtFqD,IAAIA,IAAAA,KAASA,GAAAA,CAAIA,SAAjBA,EAA4BA;AAAAA,gCAC3BA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAPA,CAD2BA;AAAAA,gCAE3BA,IAAIA,IAAAA,KAASA,GAAAA,CAAIA,CAAjBA,EAAoBA;AAAAA,oCACnBA,IAAIA,QAAAA,GAAWA,KAAKA,aAALA,CAAmBA,CAAnBA,CAAfA,CADmBA;AAAAA,oCAEnBA,IAAIA,QAAAA,KAAaA,SAAjBA,EAA4BA;AAAAA,wCAC3BA,OAAOA,KAAPA,CAD2BA;AAAAA,qCAA5BA,MAGKA;AAAAA,wCACJA,OAAAA,CAAQA,YAARA,CAAqBA,QAArBA,EADIA;AAAAA,qCALcA;AAAAA,iCAApBA,MASKA;AAAAA,oCACJA,OAAOA,KAAPA,CADIA;AAAAA,iCAXsBA;AAAAA,6BAA5BA,MAeKA;AAAAA,gCACJA,OAAAA,CAAQA,YAARA,CAAqBA,IAArBA,EADIA;AAAAA,6BAhBiFrD;AAAAA,4BAmBtFqD,OAAOA,IAAPA,CAnBsFrD;AAAAA,yBAA/EA,CA7WTpB;AAAAA,wBAsYSoB;AAAAA;AAAAA;AAAAA,wBAAAA,KAAAA,CAAAA,SAAAA,CAAAA,8BAAAA,GAARA,UAAuCA,GAAvCA,EAAsDA,KAAtDA,EAAmEA;AAAAA,4BAClEsD,IAAIA,GAAAA,GAAMA,KAAKA,eAALA,EAAVA,CADkEtD;AAAAA,4BAElEsD,IAAIA,GAAAA,KAAQA,SAAZA,EAAuBA;AAAAA,gCACtBA,OAAOA,MAAAA,CAAOA,KAAdA,CADsBA;AAAAA,6BAF2CtD;AAAAA,4BAKlEsD,IAAGA,KAAKA,UAALA,CAAgBA,YAAhBA,CAA6BA,UAAAA,IAAAA,EAAIA;AAAAA,oCAAIA,OAAAA,OAAAA,CAAAA,WAAAA,CAAYA,gBAAZA,CAA6BA,IAA7BA,CAAAA,CAAJA;AAAAA,iCAAjCA,CAAHA,EAA6EA;AAAAA,gCAC5EA,KAAKA,gBAALA,CAAsBA,YAAtBA,CAAmCA,EAAnCA,EAAuCA,KAAKA,MAA5CA,EAAoDA,KAAKA,UAALA,CAAgBA,SAAhBA,EAApDA,EAD4EA;AAAAA,gCAE5EA,OAAOA,MAAAA,CAAOA,KAAdA,CAF4EA;AAAAA,6BALXtD;AAAAA,4BASlEsD,IAAIA,GAAAA,GAAMA,KAAKA,YAALA,CAAkBA,GAAlBA,EAAuBA,KAAvBA,EAA8BA,GAA9BA,CAAVA,CATkEtD;AAAAA,4BAUlEsD,KAAKA,KAALA,GAAaA,KAAKA,WAALA,CAAiBA,WAAAA,CAAYA,OAA7BA,EAAsCA,GAAtCA,EAA2CA,QAA3CA,CAAbA,CAVkEtD;AAAAA,4BAWlEsD,OAAOA,MAAAA,CAAOA,MAAdA,CAXkEtD;AAAAA,yBAA3DA,CAtYTpB;AAAAA,wBAoZSoB,KAAAA,CAAAA,SAAAA,CAAAA,UAAAA,GAARA,YAAAA;AAAAA,4BACCuD,IAAIA,IAAJA,EACCA,IAAAA,GAAOA,EADRA,EAECA,SAAAA,GAAYA,KAAKA,UAALA,CAAgBA,SAAhBA,EAFbA,CADDvD;AAAAA,4BAICuD,OAAOA,IAAPA,EAAaA;AAAAA,gCACZA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAPA,CADYA;AAAAA,gCAEZA,IAAIA,OAAAA,CAAAA,WAAAA,CAAYA,OAAZA,CAAoBA,IAApBA,CAAJA,EAA+BA;AAAAA,oCAC9BA,IAAIA,KAAAA,GAAQA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,qBAArBA,CAA2CA,IAA3CA,CAAZA,CAD8BA;AAAAA,oCAE9BA,IAAAA,CAAKA,IAALA,CAAUA,KAAVA,EAF8BA;AAAAA,iCAA/BA,MAIKA;AAAAA,oCACJA,MADIA;AAAAA,iCANOA;AAAAA,6BAJdvD;AAAAA,4BAcCuD,IAAIA,aAAJA,CAdDvD;AAAAA,4BAeCuD,IAAIA,IAAAA,KAASA,SAAbA,EAAwBA;AAAAA,gCACvBA,aAAAA,GAAgBA,KAAKA,UAALA,CAAgBA,SAAhBA,EAAhBA,CADuBA;AAAAA,6BAAxBA,MAGKA;AAAAA,gCACJA,KAAKA,UAALA,CAAgBA,SAAhBA,GADIA;AAAAA,gCAEJA,aAAAA,GAAgBA,KAAKA,UAALA,CAAgBA,SAAhBA,EAAhBA,CAFIA;AAAAA,6BAlBNvD;AAAAA,4BAsBCuD,IAAIA,aAAAA,GAAgBA,SAAhBA,KAA8BA,CAAlCA,EAAqCA;AAAAA,gCACpCA,OAAOA,IAAPA,CADoCA;AAAAA,6BAtBtCvD;AAAAA,yBAAQA,CApZTpB;AAAAA,wBA+aSoB,KAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAARA,YAAAA;AAAAA,4BACCwD,IAAIA,QAAAA,GAAWA,KAAKA,UAALA,CAAgBA,SAAhBA,EAAfA,EACCA,MAAAA,GAASA,KAAKA,UAALA,EADVA,EAECA,MAAAA,GAASA,KAAKA,UAALA,CAAgBA,SAAhBA,EAFVA,EAGCA,UAAAA,GAAaA,MAAAA,GAASA,QAHvBA,CADDxD;AAAAA,4BAKCwD,IAAIA,UAAAA,KAAeA,CAAnBA,EAAsBA;AAAAA,gCACrBA,OAAOA,MAAPA,CADqBA;AAAAA,6BALvBxD;AAAAA,yBAAQA,CA/aTpB;AAAAA,wBAybSoB,KAAAA,CAAAA,SAAAA,CAAAA,eAAAA,GAARA,YAAAA;AAAAA,4BACCyD,IAAIA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAXA,CADDzD;AAAAA,4BAECyD,IAAIA,IAAAA,KAASA,GAAAA,CAAIA,GAAbA,IAAoBA,IAAAA,KAASA,GAAAA,CAAIA,IAArCA,EAA2CA;AAAAA,gCAC1CA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAPA,CAD0CA;AAAAA,gCAE1CA,IAAIA,QAAJA,CAF0CA;AAAAA,gCAG1CA,IAAIA,IAAAA,KAASA,GAAAA,CAAIA,KAAjBA,EAAwBA;AAAAA,oCACvBA,QAAAA,GAAWA,IAAXA,CADuBA;AAAAA,iCAAxBA,MAGKA,IAAIA,IAAAA,KAASA,GAAAA,CAAIA,IAAjBA,EAAuBA;AAAAA,oCAC3BA,KAAKA,UAALA,CAAgBA,SAAhBA,GAD2BA;AAAAA,iCANcA;AAAAA,gCAS1CA,IAAIA,MAAAA,GAASA,KAAKA,UAALA,EAAbA,CAT0CA;AAAAA,gCAU1CA,IAAIA,MAAAA,KAAWA,SAAfA,EAA0BA;AAAAA,oCACzBA,KAAKA,gBAALA,CAAsBA,YAAtBA,CAAmCA,yCAAnCA,EAA8EA,KAAKA,MAAnFA,EAA2FA,KAAKA,UAALA,CAAgBA,SAAhBA,EAA3FA,EADyBA;AAAAA,oCAEzBA,OAFyBA;AAAAA,iCAVgBA;AAAAA,gCAc1CA,IAAIA,GAAAA,GAAMA,KAAKA,YAALA,CAAkBA,MAAlBA,EAA0BA,MAAAA,CAAOA,MAAjCA,EAAyCA,CAAzCA,CAAVA,CAd0CA;AAAAA,gCAe1CA,OAAOA,QAAAA,GAAWA,CAACA,GAAZA,GAAkBA,GAAzBA,CAf0CA;AAAAA,6BAA3CA,MAiBKA,IAAIA,IAAAA,KAASA,SAAbA,EAAwBA;AAAAA,gCAC5BA,KAAKA,UAALA,CAAgBA,SAAhBA,GAD4BA;AAAAA,6BAnB9BzD;AAAAA,4BAsBCyD,OAAOA,CAAPA,CAtBDzD;AAAAA,yBAAQA,CAzbTpB;AAAAA,wBAkdSoB,KAAAA,CAAAA,SAAAA,CAAAA,aAAAA,GAARA,UAAsBA,KAAtBA,EAAmCA;AAAAA,4BAClC0D,IAAIA,KAAKA,kBAALA,CAAwBA,KAAxBA,CAAJA,EAAoCA;AAAAA,gCACnCA,IAAIA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,SAAhBA,EAAXA,EACCA,MAAAA,GAASA,KAAKA,UAALA,CAAgBA,QAAhBA,CAAyBA,IAAAA,GAAOA,KAAhCA,CADVA,CADmCA;AAAAA,gCAGnCA,OAAOA,QAAAA,CAASA,MAATA,EAAiBA,EAAjBA,CAAPA,CAHmCA;AAAAA,6BADF1D;AAAAA,yBAA3BA,CAldTpB;AAAAA,wBA0dSoB,KAAAA,CAAAA,SAAAA,CAAAA,kBAAAA,GAARA,UAA2BA,KAA3BA,EAAwCA;AAAAA,4BACvC2D,IAAIA,WAAAA,GAAcA,KAAlBA,CADuC3D;AAAAA,4BAEvC2D,GAAGA;AAAAA,gCACFA,IAAIA,IAAAA,GAAOA,KAAKA,UAALA,CAAgBA,WAAhBA,EAAXA,CADEA;AAAAA,gCAEFA,IAAIA,CAACA,OAAAA,CAAAA,WAAAA,CAAYA,UAAZA,CAAuBA,IAAvBA,CAALA,EAAmCA;AAAAA,oCAClCA,KAAKA,UAALA,CAAgBA,cAAhBA,CAA+BA,WAAAA,GAAeA,CAAAA,KAAAA,GAAQA,CAARA,CAA9CA,EADkCA;AAAAA,oCAElCA,OAAOA,KAAPA,CAFkCA;AAAAA,iCAFjCA;AAAAA,6BAAHA,QAMSA,EAAEA,KANXA,EAFuC3D;AAAAA,4BASvC2D,OAAOA,IAAPA,CATuC3D;AAAAA,yBAAhCA,CA1dTpB;AAAAA,wBAsegBoB,KAAAA,CAAAA,qBAAAA,GAAfA,UAAqCA,cAArCA,EAA+DA;AAAAA,4BAC9D4D,IAAMA,OAAAA,GAAUA,CAAAA,CAAEA,IAAFA,CAAOA,cAAPA,EAAuBA,MAAvCA,CAD8D5D;AAAAA,4BAE9D4D,IAAIA,WAAAA,GAAcA,CAAAA,CAAEA,GAAFA,CAAMA,IAAIA,KAAJA,CAAUA,OAAVA,CAANA,EAA0BA,YAAAA;AAAAA,gCAAMA,OAAAA,IAAIA,MAAJA,EAAAA,CAANA;AAAAA,6BAA1BA,CAAlBA,CAF8D5D;AAAAA,4BAG9D4D,KAAKA,IAAIA,IAAAA,GAAOA,OAAAA,GAAUA,CAArBA,CAALA,CAA6BA,IAAAA,KAASA,CAACA,CAAvCA,EAA0CA,EAAEA,IAA5CA,EAAkDA;AAAAA,gCACjDA,KAAKA,IAAIA,CAAAA,GAAIA,cAAAA,CAAeA,MAAfA,GAAwBA,CAAhCA,CAALA,CAAwCA,CAAAA,KAAMA,CAACA,CAA/CA,EAAkDA,EAAEA,CAApDA,EAAuDA;AAAAA,oCACtDA,IAAIA,CAAAA,GAAIA,cAAAA,CAAeA,CAAfA,EAAkBA,IAAlBA,CAARA,CADsDA;AAAAA,oCAEtDA,IAAIA,CAAJA,EAAOA;AAAAA,wCACNA,WAAAA,CAAYA,IAAZA,EAAkBA,CAAlBA,IAAuBA,IAAvBA,CADMA;AAAAA,qCAAPA,MAGKA;AAAAA,wCACJA,MADIA;AAAAA,qCALiDA;AAAAA,iCADNA;AAAAA,6BAHY5D;AAAAA,4BAgB9D4D;AAAAA;AAAAA,mCAAOA,YAAAA;AAAAA,gCACN,KAAKrD,UAAL,CAAgBsD,SAAhB,GADMD;AAAAA,gCAEN,KAAK,IAAIE,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIC,OAApB,EAA6B,EAAED,CAA/B,EAAkC;AAAA,oCACjC,IAAIhD,IAAA,GAAO,KAAKP,UAAL,CAAgBC,WAAhB,EAAX,CADiC;AAAA,oCAEjC,IAAI,CAACwD,WAAA,CAAYF,CAAZ,EAAehD,IAAf,CAAL,EAA2B;AAAA,wCAC1B,IAAIA,IAAA,KAASoB,SAAb,EAAwB;AAAA,4CACvB,KAAK3B,UAAL,CAAgB0D,SAAhB,GADuB;AAAA,yCADE;AAAA,wCAI1B,MAJ0B;AAAA,qCAFM;AAAA,iCAF5BL;AAAAA,gCAWN,KAAKrB,KAAL,GAAa,KAAK2B,kBAAL,CAAwBzB,WAAA,CAAY0B,WAApC,EAAiD,KAAKC,QAAtD,CAAb,CAXMR;AAAAA,gCAYN,OAAOjC,MAAA,CAAOiB,MAAd,CAZMgB;AAAAA,6BAAPA,CAhB8D5D;AAAAA,yBAAhDA,CAtehBpB;AAAAA,wBAygBSoB;AAAAA;AAAAA;AAAAA,wBAAAA,KAAAA,CAAAA,SAAAA,CAAAA,SAAAA,GAARA,YAAAA;AAAAA,4BACCqE,OAAOA;AAAAA,gCACNA,KAAAA,EAAOA;AAAAA,oCACNA,IAAAA,EAAMA,KAAKA,WADLA;AAAAA,oCAENA,MAAAA,EAAQA,KAAKA,mBAFPA;AAAAA,iCADDA;AAAAA,gCAKNA,GAAAA,EAAKA;AAAAA,oCACJA,IAAAA,EAAMA,KAAKA,MADPA;AAAAA,oCAEJA,MAAAA,EAAQA,KAAKA,UAALA,CAAgBA,SAAhBA,KAA8BA,KAAKA,cAFvCA;AAAAA,iCALCA;AAAAA,6BAAPA,CADDrE;AAAAA,yBAAQA,CAzgBTpB;AAAAA,wBAshBSoB,KAAAA,CAAAA,SAAAA,CAAAA,kBAAAA,GAARA,UAA2BA,IAA3BA,EAAyCA,OAAzCA,EAAyDA;AAAAA,4BACxDsE,OAAOA;AAAAA,gCACNA,IAAAA,EAAMA,IADAA;AAAAA,gCAENA,KAAAA,EAAOA,KAAKA,UAALA,CAAgBA,QAAhBA,CAAyBA,KAAKA,mBAA9BA,CAFDA;AAAAA,gCAGNA,OAAAA,EAASA,OAHHA;AAAAA,gCAINA,GAAAA,EAAKA,KAAKA,SAALA,EAJCA;AAAAA,6BAAPA,CADwDtE;AAAAA,yBAAjDA,CAthBTpB;AAAAA,wBA+hBSoB,KAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAARA,UAAoBA,IAApBA,EAAkCA,KAAlCA,EAA8CA,OAA9CA,EAA8DA;AAAAA,4BAC7DuE,OAAOA;AAAAA,gCACNA,IAAAA,EAAMA,IADAA;AAAAA,gCAENA,KAAAA,EAAOA,KAFDA;AAAAA,gCAGNA,OAAAA,EAASA,OAHHA;AAAAA,gCAINA,GAAAA,EAAKA,KAAKA,SAALA,EAJCA;AAAAA,6BAAPA,CAD6DvE;AAAAA,yBAAtDA,CA/hBTpB;AAAAA,wBA6iBSoB;AAAAA;AAAAA;AAAAA,wBAAAA,KAAAA,CAAAA,SAAAA,CAAAA,mBAAAA,GAARA,UAA4BA,MAA5BA,EAAoCA,IAApCA,EAA0CA,EAA1CA,EAA4CA;AAAAA,4BAC3CwE,IAAIA,GAAAA,GAAMA,CAAVA,CAD2CxE;AAAAA,4BAE3CwE,KAAKA,IAAIA,CAAAA,GAAIA,IAARA,CAALA,CAAmBA,CAAAA,GAAIA,EAAvBA,EAA2BA,EAAEA,CAA7BA,EAAgCA;AAAAA,gCAC/BA,GAAAA,GAAMA,KAAKA,GAALA,GAAWA,MAAAA,CAAOA,CAAPA,CAAjBA,CAD+BA;AAAAA,6BAFWxE;AAAAA,4BAK3CwE,OAAOA,GAAPA,CAL2CxE;AAAAA,yBAApCA,CA7iBTpB;AAAAA,wBAqjBSoB,KAAAA,CAAAA,SAAAA,CAAAA,YAAAA,GAARA,UAAqBA,MAArBA,EAA6BA,KAA7BA,EAAoCA,GAApCA,EAAuCA;AAAAA,4BACtCyE,IAAIA,UAAAA,GAAaA,KAAAA,GAAQA,GAAzBA,EACCA,OAAAA,GAAUA,CADXA,EACcA,OAAAA,GAAUA,CADxBA,CADsCzE;AAAAA,4BAGtCyE,IAAIA,UAAAA,GAAaA,CAAjBA,EAAoBA;AAAAA,gCACnBA,IAAIA,GAAAA,GAAMA,KAAKA,mBAALA,CAAyBA,MAAzBA,EAAiCA,CAAjCA,EAAoCA,MAAAA,CAAOA,MAA3CA,CAAVA,CADmBA;AAAAA,gCAEnBA,OAAOA,GAAAA,GAAMA,IAAAA,CAAKA,GAALA,CAASA,EAATA,EAAaA,KAAAA,GAAQA,GAArBA,CAAbA,CAFmBA;AAAAA,6BAApBA,MAIKA,IAAIA,UAAAA,GAAaA,MAAAA,CAAOA,MAAxBA,EAAgCA;AAAAA,gCACpCA,IAAIA,GAAAA,GAAMA,KAAKA,mBAALA,CAAyBA,MAAzBA,EAAiCA,CAAjCA,EAAoCA,MAAAA,CAAOA,MAA3CA,CAAVA,CADoCA;AAAAA,gCAEpCA,OAAOA,GAAAA,GAAMA,IAAAA,CAAKA,GAALA,CAASA,EAATA,EAAaA,UAAAA,GAAaA,MAAAA,CAAOA,MAAjCA,CAAbA,CAFoCA;AAAAA,6BAAhCA,MAIAA;AAAAA,gCACJA,IAAIA,GAAAA,GAAMA,KAAKA,mBAALA,CAAyBA,MAAzBA,EAAiCA,CAAjCA,EAAoCA,UAApCA,CAAVA,EACCA,GAAAA,GAAMA,KAAKA,mBAALA,CAAyBA,MAAzBA,EAAiCA,UAAjCA,EAA6CA,MAAAA,CAAOA,MAApDA,CADPA,CADIA;AAAAA,gCAGJA,OAAOA,GAAAA,GAAMA,GAAAA,GAAMA,IAAAA,CAAKA,GAALA,CAASA,EAATA,EAAaA,MAAAA,CAAOA,MAAPA,GAAgBA,UAA7BA,CAAnBA,CAHIA;AAAAA,6BAXiCzE;AAAAA,yBAA/BA,CArjBTpB;AAAAA,wBAukBSoB,KAAAA,CAAAA,SAAAA,CAAAA,mBAAAA,GAARA,UAA4BA,GAA5BA,EAAyCA,OAAzCA,EAAgFA;AAAAA,4BAC/E0E,IAAIA,QAAAA,GAAWA,KAAKA,aAALA,CAAmBA,GAAnBA,CAAfA,CAD+E1E;AAAAA,4BAE/E0E,IAAIA,QAAAA,KAAaA,SAAjBA,EAA4BA;AAAAA,gCAC3BA,KAAKA,gBAALA,CAAsBA,YAAtBA,CAAmCA,EAAnCA,EAAuCA,KAAKA,MAA5CA,EAAoDA,KAAKA,UAALA,CAAgBA,SAAhBA,EAApDA,EAD2BA;AAAAA,gCAE3BA,OAAOA,KAAPA,CAF2BA;AAAAA,6BAA5BA,MAIKA;AAAAA,gCACJA,OAAAA,CAAQA,YAARA,CAAqBA,QAArBA,EADIA;AAAAA,6BAN0E1E;AAAAA,4BAS/E0E,OAAOA,IAAPA,CAT+E1E;AAAAA,yBAAxEA,CAvkBTpB;AAAAA,wBAmlBSoB,KAAAA,CAAAA,SAAAA,CAAAA,aAAAA,GAARA,YAAAA;AAAAA,4BACC2E,EAAEA,KAAKA,MAAPA,CADD3E;AAAAA,4BAEC2E,KAAKA,cAALA,GAAsBA,KAAKA,UAALA,CAAgBA,SAAhBA,EAAtBA,CAFD3E;AAAAA,yBAAQA,CAnlBTpB;AAAAA,wBAwlBAoB,OAAAA,KAAAA,CAxlBApB;AAAAA,qBAAAA,EAAAA,CAxB2BP;AAAAA,oBAwBdO,OAAAA,CAAAA,KAAAA,GAAKA,KAALA,CAxBcP;AAAAA,iBAARA,CAAAA,OAAAA,GAAAA,QAAAA,CAAAA,OAAAA,IAAAA,CAAAA,QAAAA,CAAAA,OAAAA,GAAOA,EAAPA,CAAAA,GAADD;AAAAA,aAARA,CAAAA,QAAAA,GAAAA,GAAAA,CAAAA,QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,GAAQA,EAARA,CAAAA,GAAD;AAAA,SAAV,CAAOA,GAAA,IAAA,CAAAA,GAAA,GAAG,EAAH,CAAP,G;QCHA;AAAA;AAAA;AAAA,YAAOA,GAAP,C;QAAA,CAAA,UAAOA,GAAP,EAAU;AAAA,YAACA,IAAAA,QAAAA,CAAD;AAAA,YAACA,CAAAA,UAAAA,QAAAA,EAAQA;AAAAA,gBAACC,IAAAA,OAAAA,CAADD;AAAAA,gBAACC,CAAAA,UAAAA,OAAAA,EAAQA;AAAAA,oBAE3BO,IAAAA,eAAAA,GAAAA,YAAAA;AAAAA,wBAGCgG,SAAAA,eAAAA,CAAoBA,GAApBA,EAA+BA;AAAAA,4BAAXC,KAAAA,GAAAA,GAAAA,GAAAA,CAAWD;AAAAA,4BAC9BC,KAAKA,MAALA,GAAcA,CAAdA,CAD8BD;AAAAA,yBAHhChG;AAAAA,wBAOCgG,eAAAA,CAAAA,SAAAA,CAAAA,WAAAA,GAAAA,YAAAA;AAAAA,4BACCE,IAAGA,KAAKA,OAALA,EAAHA,EAAmBA;AAAAA,gCAClBA,OAAOA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,WAArBA,CAAiCA,KAAKA,GAAtCA,EAA2CA,KAAKA,MAALA,EAA3CA,CAAPA,CADkBA;AAAAA,6BADpBF;AAAAA,yBAAAA,CAPDhG;AAAAA,wBAaCgG,eAAAA,CAAAA,SAAAA,CAAAA,OAAAA,GAAAA,YAAAA;AAAAA,4BACCG,OAAOA,QAAAA,CAAAA,SAAAA,CAAUA,UAAVA,CAAqBA,WAArBA,CAAiCA,KAAKA,GAAtCA,EAA2CA,KAAKA,MAAhDA,CAAPA,CADDH;AAAAA,yBAAAA,CAbDhG;AAAAA,wBAiBCgG,eAAAA,CAAAA,SAAAA,CAAAA,SAAAA,GAAAA,YAAAA;AAAAA,4BACCI,OAAOA,KAAKA,MAAZA,CADDJ;AAAAA,yBAAAA,CAjBDhG;AAAAA,wBAqBCgG,eAAAA,CAAAA,SAAAA,CAAAA,SAAAA,GAAAA,YAAAA;AAAAA,4BACCK,EAAEA,KAAKA,MAAPA,CADDL;AAAAA,yBAAAA,CArBDhG;AAAAA,wBAyBCgG,eAAAA,CAAAA,SAAAA,CAAAA,SAAAA,GAAAA,YAAAA;AAAAA,4BACCM,IAAGA,KAAKA,OAALA,EAAHA,EAAmBA;AAAAA,gCAClBA,EAAEA,KAAKA,MAAPA,CADkBA;AAAAA,6BADpBN;AAAAA,yBAAAA,CAzBDhG;AAAAA,wBA+BCgG,eAAAA,CAAAA,SAAAA,CAAAA,cAAAA,GAAAA,UAAeA,KAAfA,EAA4BA;AAAAA,4BAC3BO,KAAKA,MAALA,GAAcA,IAAAA,CAAKA,GAALA,CAASA,KAAKA,MAALA,GAAcA,KAAvBA,EAA8BA,CAA9BA,CAAdA,CAD2BP;AAAAA,yBAA5BA,CA/BDhG;AAAAA,wBAmCCgG,eAAAA,CAAAA,SAAAA,CAAAA,QAAAA,GAAAA,UAASA,QAATA,EAAyBA;AAAAA,4BACxBQ,OAAOA,KAAKA,GAALA,CAASA,SAATA,CAAmBA,QAAnBA,EAA6BA,KAAKA,MAAlCA,CAAPA,CADwBR;AAAAA,yBAAzBA,CAnCDhG;AAAAA,wBAuCCgG,eAAAA,CAAAA,SAAAA,CAAAA,KAAAA,GAAAA,UAAMA,SAANA,EAAuBA;AAAAA,4BACtBS,IAAIA,IAAAA,GAAOA,KAAKA,WAALA,EAAXA,CADsBT;AAAAA,4BAEtBS,IAAGA,IAAAA,KAASA,SAAZA,EAAuBA;AAAAA,gCACtBA,OAAOA,IAAPA,CADsBA;AAAAA,6BAAvBA,MAGKA;AAAAA,gCACJA,IAAGA,IAAAA,KAASA,SAAZA,EAAuBA;AAAAA,oCACtBA,KAAKA,SAALA,GADsBA;AAAAA,iCADnBA;AAAAA,gCAIJA,OAAOA,KAAPA,CAJIA;AAAAA,6BALiBT;AAAAA,yBAAvBA,CAvCDhG;AAAAA,wBAoDCgG,eAAAA,CAAAA,SAAAA,CAAAA,YAAAA,GAAAA,UAAaA,UAAbA,EAAkDA;AAAAA,4BACjDU,IAAIA,IAAAA,GAAOA,KAAKA,WAALA,EAAXA,CADiDV;AAAAA,4BAEjDU,IAAGA,UAAAA,CAAWA,IAAXA,CAAHA,EAAqBA;AAAAA,gCACpBA,OAAOA,IAAPA,CADoBA;AAAAA,6BAArBA,MAGKA;AAAAA,gCACJA,IAAGA,IAAAA,KAASA,SAAZA,EAAuBA;AAAAA,oCACtBA,KAAKA,SAALA,GADsBA;AAAAA,iCADnBA;AAAAA,gCAIJA,OAAOA,KAAPA,CAJIA;AAAAA,6BAL4CV;AAAAA,yBAAlDA,CApDDhG;AAAAA,wBAiECgG,eAAAA,CAAAA,SAAAA,CAAAA,KAAAA,GAAAA,YAAAA;AAAAA,4BACCW,OAAOA,KAAKA,MAALA,IAAeA,KAAKA,GAALA,CAASA,MAA/BA,CADDX;AAAAA,yBAAAA,CAjEDhG;AAAAA,wBAqESgG,eAAAA,CAAAA,SAAAA,CAAAA,OAAAA,GAARA,YAAAA;AAAAA,4BACCY,OAAOA,KAAKA,MAALA,GAAcA,KAAKA,GAALA,CAASA,MAA9BA,CADDZ;AAAAA,yBAAQA,CArEThG;AAAAA,wBAwEAgG,OAAAA,eAAAA,CAxEAhG;AAAAA,qBAAAA,EAAAA,CAF2BP;AAAAA,oBAEdO,OAAAA,CAAAA,eAAAA,GAAeA,eAAfA,CAFcP;AAAAA,iBAARA,CAAAA,OAAAA,GAAAA,QAAAA,CAAAA,OAAAA,IAAAA,CAAAA,QAAAA,CAAAA,OAAAA,GAAOA,EAAPA,CAAAA,GAADD;AAAAA,aAARA,CAAAA,QAAAA,GAAAA,GAAAA,CAAAA,QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,GAAQA,EAARA,CAAAA,GAAD;AAAA,SAAV,CAAOA,GAAA,IAAA,CAAAA,GAAA,GAAG,EAAH,CAAP,G;QCCA;AAAA;AAAA;AAAA;AAAA,YAAOA,GAAP,C;QAAA,CAAA,UAAOA,GAAP,EAAU;AAAA,YAACA,IAAAA,QAAAA,CAAD;AAAA,YAACA,CAAAA,UAAAA,QAAAA,EAAQA;AAAAA,gBAACC,IAAAA,GAAAA,CAADD;AAAAA,gBAACC,CAAAA,UAAAA,GAAAA,EAAIA;AAAAA,oBAOvBoH,SAAAA,QAAAA,CAAyBA,GAAzBA,EAAoCA;AAAAA,wBACnCC,IAAIA,EAAAA,GAAKA,IAAIA,QAAAA,CAAAA,OAAAA,CAAQA,eAAZA,CAA4BA,GAA5BA,CAATA,EACCA,EAAAA,GAAKA,IAAIA,QAAAA,CAAAA,OAAAA,CAAQA,gBAAZA,EADNA,EAECA,GAAAA,GAAMA,IAAIA,QAAAA,CAAAA,OAAAA,CAAQA,KAAZA,CAAkBA,EAAlBA,EAAsBA,EAAtBA,CAFPA,CADmCD;AAAAA,wBAKnCC,IAAIA,MAAAA,GAA2BA,EAA/BA,CALmCD;AAAAA,wBAMnCC,OAAOA,IAAPA,EAAaA;AAAAA,4BACZA,IAAIA,KAAAA,GAAQA,GAAAA,CAAIA,YAAJA,EAAZA,CADYA;AAAAA,4BAEZA,IAAIA,KAAJA,EAAWA;AAAAA,gCACVA,MAAAA,CAAOA,IAAPA,CAAYA,KAAZA,EADUA;AAAAA,6BAAXA,MAGKA;AAAAA,gCACJA,MADIA;AAAAA,6BALOA;AAAAA,yBANsBD;AAAAA,wBAclCC,CAdkCD;AAAAA,wBAgBnCC,IAAIA,cAAAA,GAAkCA,EACrCA,MAAAA,EAAQA,MAD6BA,EAAtCA,CAhBmCD;AAAAA,wBAoBnCC,IAAIA,EAAAA,CAAGA,aAAHA,EAAJA,EAAwBA;AAAAA,4BACvBA,cAAAA,CAAeA,UAAfA,GAA4BA,EAAAA,CAAGA,aAAHA,EAA5BA,CADuBA;AAAAA,yBApBWD;AAAAA,wBAuBnCC,OAAOA,cAAPA,CAvBmCD;AAAAA,qBAPbpH;AAAAA,oBAOPoH,GAAAA,CAAAA,QAAAA,GAAQA,QAARA,CAPOpH;AAAAA,iBAAJA,CAAAA,GAAAA,GAAAA,QAAAA,CAAAA,GAAAA,IAAAA,CAAAA,QAAAA,CAAAA,GAAAA,GAAGA,EAAHA,CAAAA,GAADD;AAAAA,aAARA,CAAAA,QAAAA,GAAAA,GAAAA,CAAAA,QAAAA,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,GAAQA,EAARA,CAAAA,GAAD;AAAA,SAAV,CAAOA,GAAA,IAAA,CAAAA,GAAA,GAAG,EAAH,CAAP,G","file":"src/trowel.js","sourcesContent":["/// <reference path=\"../../../tsDefinitions/tsd.d.ts\" />\r\n\r\nmodule trl.frontend.utilities {\r\n\t\r\n\texport interface IStringFromCharPoint {\r\n\t\taddCharPoint(char: number);\r\n\t\tgetString(): string;\r\n\t}\r\n\t\r\n\texport class CharPoints {\r\n\t\tstatic createStringFromCharPointGenerator(): IStringFromCharPoint {\r\n\t\t\tlet charBuffer: string[] = [];\r\n\t\t\treturn {\r\n\t\t\t\taddCharPoint: (char: number) => {\r\n\t\t\t\t\tcharBuffer.push(CharPoints.fromCodePoint(char));\r\n\t\t\t\t},\r\n\t\t\t\tgetString: (): string => {\r\n\t\t\t\t\treturn charBuffer.join('');\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tprivate static ZERO_CHAR_CODE = \"0\".charCodeAt(0);\r\n\t\tstatic getDigitFromCharPoint(c: number): number {\r\n\t\t\treturn c - CharPoints.ZERO_CHAR_CODE;\r\n\t\t}\r\n\t\t\r\n\t\tstatic codePointAt(str: string, pos: number): number {\r\n\t\t\treturn (<any>str).codePointAt(pos);\r\n\t\t}\r\n\t\t\r\n\t\tstatic fromCodePoint(point: number): string {\r\n\t\t\treturn (<any>String).fromCodePoint(point);\r\n\t\t}\r\n\t}\r\n\t\r\n}","/// <reference path=\"IException.d.ts\" />\r\n\r\nmodule trl.frontend.lexical {\r\n\texport class ExceptionHandler {\r\n\t\tprivate exceptions: IException[] = [];\r\n\t\t\r\n\t\tconstructor(){}\r\n\t\t\r\n\t\tpublic addException(msg: string, line: number, col: number) {\r\n\t\t\tlet exception: IException = {\r\n\t\t\t\tpos: {\r\n\t\t\t\t\tcol: col,\r\n\t\t\t\t\tline: line\r\n\t\t\t\t},\t\t\r\n\t\t\t\tmsg: msg\r\n\t\t\t};\r\n\t\t\tthis.exceptions.push(exception);\r\n\t\t}\r\n\t\t\r\n\t\tpublic hasExceptions(): boolean {\r\n\t\t\treturn !_.isEmpty(this.exceptions);\r\n\t\t}\r\n\t\t\r\n\t\tpublic clear(): void {\r\n\t\t\tthis.exceptions.length = 0;\r\n\t\t}\r\n\t\t\r\n\t\tpublic getExceptions(): IException[] {\r\n\t\t\treturn this.exceptions;\r\n\t\t}\r\n\t}\r\n}","\r\nmodule trl.frontend.lexical {\r\n\tconst t = true;\r\n\t\r\n\texport class TokenDefinitions {\r\n\t\r\n\t\tstatic WS = {\r\n\t\t\t0x0009: t,\r\n\t\t\t0x000B: t,\r\n\t\t\t0x000C: t,\r\n\t\t\t0x0020: t,\r\n\t\t\t0x00A0: t,\r\n\t\t\t0xFEFF: t\r\n\t\t};\r\n\t\t\r\n\t\tstatic LT = {\r\n\t\t\t0x000A: t,\r\n\t\t\t0x000D: t,\r\n\t\t\t0x2028: t,\r\n\t\t\t0x202: t\r\n\t\t};\r\n\r\n// 0x200C: t, //zwnj\r\n// 0x200D: t, //zwj\r\n\t\t\t\t\r\n\t\tstatic KW = {\r\n\t\t\tbreak: t,\r\n\t\t\tdo: t,\r\n\t\t\tinstanceof: t,\r\n\t\t\ttypeof: t,\r\n\t\t\tcase: t,\r\n\t\t\telse: t,\r\n\t\t\tnew: t,\r\n\t\t\tvar: t,\r\n\t\t\tcatch: t,\r\n\t\t\tfinally: t,\r\n\t\t\treturn: t,\r\n\t\t\tvoid: t,\r\n\t\t\tcontinue: t,\r\n\t\t\tfor: t,\r\n\t\t\tswitch: t,\r\n\t\t\twhile: t,\r\n\t\t\tdebugger: t,\r\n\t\t\tfunction: t,\r\n\t\t\tthis: t,\r\n\t\t\twith: t,\r\n\t\t\tdefault: t,\r\n\t\t\tif: t,\r\n\t\t\tthrow: t,\r\n\t\t\tdelete: t,\r\n\t\t\tin: t,\r\n\t\t\ttry: t,\r\n\t\r\n\t\t\tclass: t,\r\n\t\t\tenum: t,\r\n\t\t\textends: t,\r\n\t\t\tsuper: t,\r\n\t\t\tconst: t,\r\n\t\t\texport: t,\r\n\t\t\timport: t,\r\n\t\r\n\t\t\timplements: t,\r\n\t\t\tlet: t,\r\n\t\t\tprivate: t,\r\n\t\t\tpublic: t,\r\n\t\t\tinterface: t,\r\n\t\t\tpackage: t,\r\n\t\t\tprotected: t,\r\n\t\t\tstatic: t,\r\n\t\t\tyield: t\r\n\t\t};\r\n\t\t\r\n\t\tstatic LIT = {\r\n\t\t\tnull: t,\r\n\t\t\ttrue: t,\r\n\t\t\tfalse: t\r\n\t\t};\r\n\t\t\r\n\t\tstatic PNC_SINGLE = {\r\n\t\t\tlbrace: 123,\r\n\t\t\trbrace: 125,\r\n\t\t\tlparenth: 40,\r\n\t\t\trparenth: 41,\r\n\t\t\tlbracket: 91,\r\n\t\t\trbracket: 93,\r\n\t\t\tdot: 46,\r\n\t\t\tsemicolon: 59,\r\n\t\t\tcomma: 44,\r\n\t\t\tless: 60,\r\n\t\t\tmore: 62,\r\n\t\t\tplus: 43,\r\n\t\t\tminus: 45,\r\n\t\t\tpercent: 37,\r\n\t\t\tampersand: 38,\r\n\t\t\tvertical: 124,\r\n\t\t\tcaret: 94,\r\n\t\t\texcl: 33,\r\n\t\t\ttilde: 126,\r\n\t\t\tquest: 63,\r\n\t\t\tcolon: 58,\r\n\t\t\tassign: 61,\r\n\t\t\tasterisk: 42,\r\n\t\t\tslash: 47,\r\n\t\t\tbackslash: 92,\r\n\t\t\tdollar: 36,\r\n\t\t\texp: 101,\r\n\t\t\texpb: 69,\r\n\t\t\tapostrophe: 39,\r\n\t\t\tqmark: 34,\r\n\t\t\tzero: 48,\r\n\t\t\t\r\n\t\t\tb: 98,\r\n\t\t\tf: 102,\r\n\t\t\tn: 110,\r\n\t\t\tr: 114,\r\n\t\t\tt: 116,\r\n\t\t\tv: 118,\r\n\t\t\tx: 120,\r\n\t\t\tu: 117,\r\n\t\t\t\r\n\t\t\tlf: 0x000A\r\n\t\t};\t\t\r\n\t\t\r\n\t\t\r\n\t\tstatic UNICODE_UNCOMMON_THRESHOLD = 170;\r\n\t\t\r\n\t\tstatic UNICODE_CONTINUE_COMMON = { 0x200C: t /* zwnj */, 0x200D: t /* zwj */, 36: t /* $ */, 92: t /* \\ */, \r\n\t\t\t48: t, 49: t, 50: t, 51: t, 52: t, 53: t, 54: t, 55: t, 56: t, 57: t, 65: t, 66: t, 67: t, 68: t, 69: t, 70: t, 71: t, 72: t, 73: t, 74: t, 75: t, 76: t, 77: t, 78: t, 79: t, 80: t, 81: t, 82: t, 83: t, 84: t, 85: t, 86: t, 87: t, 88: t, 89: t, 90: t, 95: t, 97: t, 98: t, 99: t, 100: t, 101: t, 102: t, 103: t, 104: t, 105: t, 106: t, 107: t, 108: t, 109: t, 110: t, 111: t, 112: t, 113: t, 114: t, 115: t, 116: t, 117: t, 118: t, 119: t, 120: t, 121: t, 122: t };\r\n\t\t\r\n\t\tstatic UNICODE_CONTINUE_UNCOMMON = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u0241\\u0250-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EE\\u0300-\\u036F\\u037A\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03CE\\u03D0-\\u03F5\\u03F7-\\u0481\\u0483-\\u0486\\u048A-\\u04CE\\u04D0-\\u04F9\\u0500-\\u050F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05B9\\u05BB-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u0615\\u0621-\\u063A\\u0640-\\u065E\\u0660-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u076D\\u0780-\\u07B1\\u0901-\\u0939\\u093C-\\u094D\\u0950-\\u0954\\u0958-\\u0963\\u0966-\\u096F\\u097D\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A74\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B43\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3E-\\u0D43\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D60\\u0D61\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC\\u0EDD\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6A\\u0F71-\\u0F84\\u0F86-\\u0F8B\\u0F90-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1021\\u1023-\\u1027\\u1029\\u102A\\u102C-\\u1032\\u1036-\\u1039\\u1040-\\u1049\\u1050-\\u1059\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18A9\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1D00-\\u1DC3\\u1E00-\\u1E9B\\u1EA0-\\u1EF9\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u2094\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20EB\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2131\\u2133-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u2160-\\u2183\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312C\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FBB\\uA000-\\uA48C\\uA800-\\uA827\\uAC00-\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE23\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDF00-\\uDF1E\\uDF30-\\uDF4A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCE-\\uDFFF]|[\\uD840-\\uD868][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\r\n\r\n\t\tstatic UNICODE_START_COMMON = { 36: t /* $ */, 92: t /* \\ */, 95: t /* _ */, 65: t, 66: t, 67: t, 68: t, 69: t, 70: t, 71: t, 72: t, 73: t, 74: t, 75: t, 76: t, 77: t, 78: t, 79: t, 80: t, 81: t, 82: t, 83: t, 84: t, 85: t, 86: t, 87: t, 88: t, 89: t, 90: t, 97: t, 98: t, 99: t, 100: t, 101: t, 102: t, 103: t, 104: t, 105: t, 106: t, 107: t, 108: t, 109: t, 110: t, 111: t, 112: t, 113: t, 114: t, 115: t, 116: t, 117: t, 118: t, 119: t, 120: t, 121: t, 122: t };\r\n\t\t\r\n\t\tstatic UNICODE_START_UNCOMMON = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u0241\\u0250-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EE\\u037A\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03CE\\u03D0-\\u03F5\\u03F7-\\u0481\\u048A-\\u04CE\\u04D0-\\u04F9\\u0500-\\u050F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u063A\\u0640-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u076D\\u0780-\\u07A5\\u07B1\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u097D\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D60\\u0D61\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6A\\u0F88-\\u0F8B\\u1000-\\u1021\\u1023-\\u1027\\u1029\\u102A\\u1050-\\u1055\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1D00-\\u1DBF\\u1E00-\\u1E9B\\u1EA0-\\u1EF9\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u2094\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2131\\u2133-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u2160-\\u2183\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312C\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FBB\\uA000-\\uA48C\\uA800\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uAC00-\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDF00-\\uDF1E\\uDF30-\\uDF4A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9]|[\\uD840-\\uD868][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6]|\\uD87E[\\uDC00-\\uDE1D]/;\r\n\t\r\n\t}\r\n}","/// <reference path=\"../../../tsDefinitions/tsd.d.ts\" />\r\n/// <reference path=\"../utilities/CharPoints.ts\" />\r\n/// <reference path=\"TokenDefinitions.ts\" />\r\n\r\nmodule trl.frontend.lexical {\r\n\t\r\n\tlet hexDigits = {};\r\n\t_.each(\"0123456789ABCDEFabcdef\", (numChar) => {\r\n\t\t\r\n\t\thexDigits[utilities.CharPoints.codePointAt(numChar, 0)] = true;\r\n\t});\r\n\t\r\n\tlet digits = {};\r\n\t_.each(\"0123456789\", (numChar) => {\r\n\t\tdigits[utilities.CharPoints.codePointAt(numChar, 0)] = true;\r\n\t});\r\n\t\r\n\texport class Identifyers {\r\n\t\r\n\t\tstatic isHexDigit(c: number): boolean {\r\n\t\t\treturn hexDigits[c];\r\n\t\t}\r\n\t\t\r\n\t\tstatic isDigit(c: number): boolean {\r\n\t\t\treturn digits[c];\r\n\t\t}\r\n\r\n\t\tstatic isKeyword(str: string): boolean {\r\n\t\t\treturn TokenDefinitions.KW[str];\r\n\t\t}\r\n\t\t\r\n\t\tstatic isLineTerminator(c: number): boolean {\r\n\t\t\treturn TokenDefinitions.LT[c];\r\n\t\t}\r\n\r\n\t\tstatic isIdentifierStart(c: number): boolean {\r\n\t\t\treturn Identifyers.isSimpleUnicodeStart(c)\r\n\t\t\t\t|| Identifyers.isComplexUnicodeStart(c);\r\n\t\t}\r\n\t\t\r\n\t\tstatic isIdentifierPart(c: number): boolean {\r\n\t\t\treturn Identifyers.isSimpleUnicodeContinue(c)\r\n\t\t\t\t|| Identifyers.isComplexUnicodeContinue(c);\r\n\t\t}\r\n\r\n\t\tstatic isSimpleUnicodeContinue(c: number): boolean {\r\n\t\t\treturn TokenDefinitions.UNICODE_CONTINUE_COMMON[c];\r\n\t\t}\t\r\n\t\t\t\r\n\t\tstatic isComplexUnicodeContinue(c: number): boolean {\r\n\t\t\treturn c > TokenDefinitions.UNICODE_UNCOMMON_THRESHOLD \r\n\t\t\t\t&& TokenDefinitions.UNICODE_CONTINUE_UNCOMMON.test(utilities.CharPoints.fromCodePoint(c));\r\n\t\t}\t\r\n\t\t\r\n\t\tstatic isSimpleUnicodeStart(c: number): boolean {\r\n\t\t\treturn TokenDefinitions.UNICODE_START_COMMON[c];\r\n\t\t}\t\r\n\t\t\t\r\n\t\tstatic isComplexUnicodeStart(c: number): boolean {\r\n\t\t\treturn c > TokenDefinitions.UNICODE_UNCOMMON_THRESHOLD \r\n\t\t\t\t&& TokenDefinitions.UNICODE_START_UNCOMMON.test(utilities.CharPoints.fromCodePoint(c));\r\n\t\t}\t\r\n\t\t\r\n\t\tstatic isPunctuationStart(c: number): boolean {\r\n\t\t\treturn TokenDefinitions.PNC_SINGLE[c];\r\n\t\t}\r\n\t\t\r\n\t}\r\n}","/// <reference path=\"../../../tsDefinitions/tsd.d.ts\" />\r\n/// <reference path=\"../utilities/CharPoints.ts\" />\r\n/// <reference path=\"ILexer.d.ts\" />\r\n/// <reference path=\"Exception.ts\" />\r\n/// <reference path=\"TokenDefinitions.ts\" />\r\n/// <reference path=\"Identifyers.ts\" />\r\n\r\nmodule trl.frontend.lexical {\r\n\r\n\tconst States = {\r\n\t\tidentifier: \"stateIdentifier\",\r\n\t\tpunctuation: \"statePunctuation\",\r\n\t\tmultiComment: \"stateMultiComment\",\r\n\t\tsingleComment: \"stateSingleComment\",\r\n\t\tdivOrComment: \"stateDivOrComment\",\r\n\t\tdotOrNumber: \"stateDotOrNumber\",\r\n\t\terror: \"stateError\",\r\n\t\tfinish: \"stateFinish\",\r\n\t\tinit: \"stateInit\"\r\n\t};\r\n\r\n\tconst TokenValues = {\r\n\t\tkeyword: \"keyword\",\r\n\t\tidentifier: \"identifier\",\r\n\t\tliteral: \"literal\",\r\n\t\tpunctuation: \"punctuation\",\r\n\t\tcomment: \"comment\"\r\n\t};\r\n\r\n\tconst PNC = TokenDefinitions.PNC_SINGLE;\r\n\r\n\texport class Lexer implements ILexer {\r\n\t\tprivate static CharecterLookup;\r\n\r\n\t\tprivate token: IToken;\r\n\t\tprivate lineno: number;\r\n\t\tprivate startLineno: number;\r\n\t\tprivate currLineCursor: number;\r\n\t\tprivate relativeStartCursor: number;\r\n\t\tprivate absoluteStartCursor: number;\r\n\r\n\r\n\t\tprivate static initiateCharecterLookupOnce() {\r\n\t\t\tif (Lexer.CharecterLookup) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlet lookup = Lexer.CharecterLookup = {};\r\n\t\t\t\r\n\t\t\t//white space\r\n\t\t\t_.each(<any>TokenDefinitions.WS, (val, key: number) => lookup[key] = Lexer.prototype.stateWhiteSpace);\r\n\t\t\t\r\n\t\t\t//new line\r\n\t\t\t_.each(<any>TokenDefinitions.LT, (val, key: number) => lookup[key] = Lexer.prototype.stateLineTerminator);\r\n\t\t\t\r\n\t\t\t//string\r\n\t\t\tlookup[PNC.qmark] = Lexer.genStateString(PNC.qmark);\r\n\t\t\tlookup[PNC.apostrophe] = Lexer.genStateString(PNC.apostrophe);\r\n\t\t\t\r\n\t\t\t//number\r\n\t\t\t_.each(\"0123456789\", (numChar) => {\r\n\t\t\t\tlookup[utilities.CharPoints.codePointAt(numChar, 0)] = Lexer.prototype.stateNumber;\r\n\t\t\t});\r\n\r\n\t\t\tlookup[PNC.lbrace] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\tlookup[PNC.rbrace] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\tlookup[PNC.lparenth] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\tlookup[PNC.rparenth] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\tlookup[PNC.lbracket] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\tlookup[PNC.rbracket] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\t\r\n\t\t\t// . .1\r\n\t\t\tlookup[PNC.dot] = () => States.dotOrNumber;\r\n\r\n\t\t\tlookup[PNC.semicolon] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\tlookup[PNC.comma] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\t\r\n\t\t\t// < << <= <<< <<=\r\n\t\t\tlookup[PNC.less] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.less], [PNC.assign], [PNC.less, PNC.less], [PNC.less, PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// > >= >> >>= >>> >>>=\r\n\t\t\tlookup[PNC.more] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.more], [PNC.assign], [PNC.more, PNC.more], [PNC.more, PNC.assign], [PNC.more, PNC.more, PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// ! != !==\r\n\t\t\tlookup[PNC.excl] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.assign], [PNC.assign, PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// - -- -=\r\n\t\t\tlookup[PNC.minus] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.minus], [PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// + ++ +-=\r\n\t\t\tlookup[PNC.plus] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.plus], [PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// % %=\r\n\t\t\tlookup[PNC.percent] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// & && &=\r\n\t\t\tlookup[PNC.ampersand] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.ampersand], [PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// | || |=\r\n\t\t\tlookup[PNC.vertical] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.vertical], [PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// ^ ^=\r\n\t\t\tlookup[PNC.vertical] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.assign]]\r\n\t\t\t);\r\n\r\n\t\t\tlookup[PNC.tilde] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\tlookup[PNC.quest] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\tlookup[PNC.colon] = Lexer.prototype.statePunctuationSingle;\r\n\t\t\t// = == ===\r\n\t\t\tlookup[PNC.assign] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.assign], [PNC.assign, PNC.assign]]\r\n\t\t\t);\r\n\t\t\t// * *=\r\n\t\t\tlookup[PNC.asterisk] = Lexer.genPunctuationScanner(\r\n\t\t\t\t[[PNC.assign]]\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t// / /= /* // comment\r\n\t\t\tlookup[PNC.slash] = () => States.divOrComment;\r\n\r\n\t\t\t// \\ whitespace\r\n\t\t\tlookup[PNC.backslash] = () => States.identifier;\r\n\t\t}\r\n\r\n\t\tconstructor(private charStream: ICharacterStream, private exceptionHandler: ExceptionHandler) {\r\n\t\t\tthis.lineno = 0;\r\n\t\t\tthis.currLineCursor = 0;\r\n\r\n\t\t\tLexer.initiateCharecterLookupOnce();\r\n\t\t}\r\n\r\n\t\tgetNextToken(): IToken {\r\n\t\t\tlet nextState = this.stateInit();\r\n\t\t\twhile (nextState) {\r\n\t\t\t\tnextState = this[nextState].call(this);\r\n\t\t\t}\r\n\t\t\treturn this.token;\r\n\t\t}\r\n\r\n\t\t///////////////////////////\r\n\t\t// final states\r\n\t\t\r\n\t\tprivate stateFinish() { }\r\n\r\n\t\tprivate stateError() { }\r\n\t\t/////// final states //////\r\n\t\t\r\n\t\t///////////////////////////////////////////\r\n\t\t// States\r\n\t\t\r\n\t\tprivate stateInit() {\r\n\t\t\t//cleanup current token\r\n\t\t\tthis.token = undefined;\r\n\t\t\t\r\n\t\t\t//track cursor position\r\n\t\t\tthis.startLineno = this.lineno;\r\n\t\t\tthis.relativeStartCursor = this.charStream.getCursor() - this.currLineCursor;\r\n\t\t\tthis.absoluteStartCursor = this.charStream.getCursor();\r\n\r\n\t\t\tlet nextState,\r\n\t\t\t\tchar = this.charStream.getNextChar();\r\n\r\n\t\t\tif (Identifyers.isIdentifierStart(char)) {\r\n\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t\tnextState = States.identifier;\r\n\t\t\t} else {\r\n\t\t\t\tlet charCachedHandler: () => string = Lexer.CharecterLookup[char];\r\n\t\t\t\tif (charCachedHandler) {\r\n\t\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t\t\tnextState = charCachedHandler.call(this);\r\n\t\t\t\t}\r\n\t\t\t\telse if (char !== undefined) {\r\n\t\t\t\t\tthis.exceptionHandler.addException(\r\n\t\t\t\t\t\t\"unexpected token \\\"\" + utilities.CharPoints.fromCodePoint(char) + \"\\\"\",\r\n\t\t\t\t\t\tthis.lineno,\r\n\t\t\t\t\t\tthis.charStream.getCursor()\r\n\t\t\t\t\t);\r\n\t\t\t\t\tnextState = States.error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn nextState;\r\n\t\t}\r\n\r\n\t\tprivate stateIdentifier(): string {\r\n\t\t\tlet charGen: utilities.IStringFromCharPoint = utilities.CharPoints.createStringFromCharPointGenerator(),\r\n\t\t\t\tchar = this.charStream.getNextChar();\r\n\r\n\t\t\tif (!this.scanUnicodeEscapeSequence(charGen, char)) {\r\n\t\t\t\tthis.exceptionHandler.addException(\"\", this.lineno, this.charStream.getCursor());\r\n\t\t\t\treturn States.error;\r\n\t\t\t}\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet char = this.charStream.getNextChar();\r\n\t\t\t\tif (Identifyers.isIdentifierPart(char)) {\r\n\t\t\t\t\tif (!this.scanUnicodeEscapeSequence(charGen, char)) {\r\n\t\t\t\t\t\tthis.exceptionHandler.addException(\"\", this.lineno, this.charStream.getCursor());\r\n\t\t\t\t\t\treturn States.error;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (char !== undefined) {\r\n\t\t\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet type,\r\n\t\t\t\tsubType,\r\n\t\t\t\tstr: any = charGen.getString();\r\n\t\t\tif (Identifyers.isKeyword(str)) {\r\n\t\t\t\ttype = TokenValues.keyword;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tswitch (str) {\r\n\t\t\t\t\tcase \"null\":\r\n\t\t\t\t\t\ttype = TokenValues.literal;\r\n\t\t\t\t\t\tsubType = \"null\";\r\n\t\t\t\t\t\tstr = null;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"true\":\r\n\t\t\t\t\t\ttype = TokenValues.literal;\r\n\t\t\t\t\t\tsubType = \"boolean\";\r\n\t\t\t\t\t\tstr = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"false\":\r\n\t\t\t\t\t\ttype = TokenValues.literal;\r\n\t\t\t\t\t\tsubType = \"boolean\";\r\n\t\t\t\t\t\tstr = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\ttype = TokenValues.identifier;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.token = this.createToken(type, str, subType);\r\n\t\t\treturn States.finish;\r\n\t\t}\r\n\r\n\t\tprivate static genStateString(stringTerminatorChar: number): () => string {\r\n\t\t\t// esc seq ->\r\n\t\t\t// \\ ' \" \\ b f n r t v  -> val\r\n\t\t\t// \\ x HexDigit HexDigit  -> hex val\r\n\t\t\t// \\ u HexDigit HexDigit HexDigit HexDigit -> u val\r\n\t\t\t// \\ line cont -> ignore\r\n\t\t\t// \\ decimal digit -> ignore digit\r\n\t\t\t// \\ char -> ignore \\\r\n\t\t\t\r\n\t\t\t// cannot be an arrow function because it binds _this -> this\r\n\t\t\treturn function() {\r\n\t\t\t\tthis.charStream.getNextChar();\r\n\t\t\t\tlet charGen: utilities.IStringFromCharPoint = utilities.CharPoints.createStringFromCharPointGenerator();\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tlet char = this.charStream.getNextChar();\r\n\t\t\t\t\tif (char === stringTerminatorChar) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else if (char === PNC.backslash) {\r\n\t\t\t\t\t\tchar = this.charStream.getNextChar();\r\n\t\t\t\t\t\tswitch (char) {\r\n\t\t\t\t\t\t\tcase PNC.b: charGen.addCharPoint(8); break;\r\n\t\t\t\t\t\t\tcase PNC.f: charGen.addCharPoint(12); break;\r\n\t\t\t\t\t\t\tcase PNC.n: charGen.addCharPoint(10); break;\r\n\t\t\t\t\t\t\tcase PNC.r: charGen.addCharPoint(13); break;\r\n\t\t\t\t\t\t\tcase PNC.t: charGen.addCharPoint(9); break;\r\n\t\t\t\t\t\t\tcase PNC.v: charGen.addCharPoint(11); break;\r\n\r\n\t\t\t\t\t\t\tcase PNC.x:\r\n\t\t\t\t\t\t\t\tif (!this.handleScanHexDigits(2, charGen)) {\r\n\t\t\t\t\t\t\t\t\treturn States.error;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase PNC.u:\r\n\t\t\t\t\t\t\t\tif (!this.handleScanHexDigits(4, charGen)) {\r\n\t\t\t\t\t\t\t\t\treturn States.error;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tif (Identifyers.isLineTerminator(char)) {\r\n\t\t\t\t\t\t\t\t\tcharGen.addCharPoint(char);\r\n\t\t\t\t\t\t\t\t\tthis.handleNewLine();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (char === undefined) {\r\n\t\t\t\t\t\tthis.exceptionHandler.addException(\"unclosed string\", this.lineno, this.charStream.getCursor());\r\n\t\t\t\t\t\treturn States.error;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcharGen.addCharPoint(char);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.token = this.createToken(TokenValues.literal, charGen.getString(), 'string');\r\n\t\t\t\treturn States.finish;\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tprivate stateNumber(): string {\r\n\t\t\tlet int = this.scanDigits(),\r\n\t\t\t\tpoint = int.length;\r\n\t\t\tif (this.charStream.match(PNC.dot)) {\r\n\t\t\t\tlet decimal = this.scanDecimal();\r\n\t\t\t\tif (decimal !== undefined) {\r\n\t\t\t\t\tint = int.concat(decimal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this.scanExponensialAndCreateNumber(int, point);\r\n\t\t}\r\n\t\t\r\n\t\tprivate stateDotOrNumber() {\r\n\t\t\tthis.charStream.fwdCursor();\r\n\t\t\tlet decimal = this.scanDecimal();\r\n\t\t\tif (decimal !== undefined) {\r\n\t\t\t\treturn this.scanExponensialAndCreateNumber(decimal, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t\treturn this.statePunctuationSingle();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate stateDivOrComment() {\r\n\t\t\tthis.charStream.fwdCursor();\r\n\t\t\tlet char = this.charStream.getNextChar();\r\n\t\t\tswitch (char) {\r\n\t\t\t\tcase PNC.slash:\r\n\t\t\t\t\treturn States.singleComment;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase PNC.asterisk:\r\n\t\t\t\t\treturn States.multiComment;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase PNC.assign:\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t}\r\n\t\t\tthis.charStream.bwdCursor();\r\n\t\t\treturn this.statePunctuationSingle();\r\n\t\t}\r\n\r\n\t\tprivate statePunctuationSingle(): string {\r\n\t\t\tthis.charStream.fwdCursor();\r\n\t\t\tthis.token = this.createTokenFromPos(TokenValues.punctuation);\r\n\t\t\treturn States.finish;\r\n\t\t}\r\n\r\n\t\tprivate stateWhiteSpace(): string {\r\n\t\t\tthis.charStream.fwdCursor();\r\n\t\t\treturn States.init;\r\n\t\t}\r\n\r\n\t\tprivate stateLineTerminator(): string {\r\n\t\t\tthis.charStream.fwdCursor();\r\n\t\t\tthis.charStream.matchComplex(char => char === PNC.lf || char === undefined);\r\n\t\t\tthis.handleNewLine();\r\n\t\t\treturn States.init;\r\n\t\t}\r\n\r\n\t\tprivate stateSingleComment(): string {\r\n\t\t\tdo {\r\n\t\t\t\tvar char = this.charStream.getNextChar();\r\n\t\t\t\tif (Identifyers.isLineTerminator(char)) {\r\n\t\t\t\t\tthis.handleNewLine();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} while (char !== undefined);\r\n\t\t\tthis.token = this.createTokenFromPos(TokenValues.comment);\r\n\t\t\treturn States.finish;\r\n\t\t}\r\n\r\n\t\tprivate stateMultiComment(): string {\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet char = this.charStream.getNextChar();\r\n\t\t\t\tif (char === PNC.asterisk) {\r\n\t\t\t\t\tif (this.charStream.match(PNC.slash)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (char === undefined) {\r\n\t\t\t\t\tthis.exceptionHandler.addException(\"unclosed comment\", this.lineno, this.charStream.getCursor());\r\n\t\t\t\t\treturn States.error;\r\n\t\t\t\t}\r\n\t\t\t\telse if (Identifyers.isLineTerminator(char)) {\r\n\t\t\t\t\tthis.handleNewLine();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.token = this.createTokenFromPos(TokenValues.comment);\r\n\t\t\treturn States.finish;\r\n\t\t}\r\n\r\n\t\tprivate scanUnicodeEscapeSequence(charGen: utilities.IStringFromCharPoint, char: number): boolean {\r\n\t\t\tif (char === PNC.backslash) {\r\n\t\t\t\tchar = this.charStream.getNextChar();\r\n\t\t\t\tif (char === PNC.u) {\r\n\t\t\t\t\tlet hexDigit = this.scanHexDigits(4);\r\n\t\t\t\t\tif (hexDigit === undefined) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcharGen.addCharPoint(hexDigit);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcharGen.addCharPoint(char);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t///////////////////States//////////////////\r\n\t\t\r\n\t\t///////////////////////////////////////////\r\n\t\t// Scanners\r\n\t\tprivate scanExponensialAndCreateNumber(int: number[], point: number): string {\r\n\t\t\tlet exp = this.scanExponential();\r\n\t\t\tif (exp === undefined) {\r\n\t\t\t\treturn States.error;\r\n\t\t\t}\r\n\t\t\tif(this.charStream.matchComplex(char => Identifyers.isIdentifierPart(char))) {\r\n\t\t\t\tthis.exceptionHandler.addException(\"\", this.lineno, this.charStream.getCursor());\r\n\t\t\t\treturn States.error;\r\n\t\t\t}\r\n\t\t\tlet num = this.createNumber(int, point, exp);\r\n\t\t\tthis.token = this.createToken(TokenValues.literal, num, \"number\");\r\n\t\t\treturn States.finish\r\n\t\t}\r\n\t\t\r\n\t\tprivate scanDigits(): number[] {\r\n\t\t\tlet char,\r\n\t\t\t\tdits = [],\r\n\t\t\t\tcursorPos = this.charStream.getCursor();\r\n\t\t\twhile (true) {\r\n\t\t\t\tchar = this.charStream.getNextChar();\r\n\t\t\t\tif (Identifyers.isDigit(char)) {\r\n\t\t\t\t\tlet digit = utilities.CharPoints.getDigitFromCharPoint(char);\r\n\t\t\t\t\tdits.push(digit);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet currCursorpos;\r\n\t\t\tif (char === undefined) {\r\n\t\t\t\tcurrCursorpos = this.charStream.getCursor();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t\tcurrCursorpos = this.charStream.getCursor();\r\n\t\t\t}\r\n\t\t\tif (currCursorpos - cursorPos !== 0) {\r\n\t\t\t\treturn dits;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate scanDecimal(): number[] {\r\n\t\t\tlet startPos = this.charStream.getCursor(),\r\n\t\t\t\tdigits = this.scanDigits(),\r\n\t\t\t\tendPos = this.charStream.getCursor(),\r\n\t\t\t\tdigitRange = endPos - startPos;\r\n\t\t\tif (digitRange !== 0) {\r\n\t\t\t\treturn digits;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate scanExponential(): number {\r\n\t\t\tlet char = this.charStream.getNextChar();\r\n\t\t\tif (char === PNC.exp || char === PNC.expb) {\r\n\t\t\t\tchar = this.charStream.getNextChar();\r\n\t\t\t\tlet negative;\r\n\t\t\t\tif (char === PNC.minus) {\r\n\t\t\t\t\tnegative = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (char !== PNC.plus) {\r\n\t\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t\t}\r\n\t\t\t\tlet digits = this.scanDigits();\r\n\t\t\t\tif (digits === undefined) {\r\n\t\t\t\t\tthis.exceptionHandler.addException(\"exponential should postfixed by numbers\", this.lineno, this.charStream.getCursor());\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tlet num = this.createNumber(digits, digits.length, 0);\r\n\t\t\t\treturn negative ? -num : num;\r\n\t\t\t}\r\n\t\t\telse if (char !== undefined) {\r\n\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tprivate scanHexDigits(times: number): number {\r\n\t\t\tif (this.scanHexDigitsTimes(times)) {\r\n\t\t\t\tlet char = this.charStream.getCursor(),\r\n\t\t\t\t\thexStr = this.charStream.tokenize(char - times);\r\n\t\t\t\treturn parseInt(hexStr, 16);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate scanHexDigitsTimes(times: number): boolean {\r\n\t\t\tlet startingPos = times;\r\n\t\t\tdo {\r\n\t\t\t\tlet char = this.charStream.getNextChar();\r\n\t\t\t\tif (!Identifyers.isHexDigit(char)) {\r\n\t\t\t\t\tthis.charStream.bwdCursorRange(startingPos - (times - 1));\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} while (--times);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tprivate static genPunctuationScanner(candicatePuncs: number[][]) {\r\n\t\t\tconst lastLen = _.last(candicatePuncs).length;\r\n\t\t\tlet puncsLookup = _.map(new Array(lastLen), () => new Object());\r\n\t\t\tfor (let curr = lastLen - 1; curr !== -1; --curr) {\r\n\t\t\t\tfor (let i = candicatePuncs.length - 1; i !== -1; --i) {\r\n\t\t\t\t\tlet c = candicatePuncs[i][curr];\r\n\t\t\t\t\tif (c) {\r\n\t\t\t\t\t\tpuncsLookup[curr][c] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// cannot use arrow function because it confuse this with _this \r\n\t\t\t// in the compliled typescript version\r\n\t\t\treturn function() {\r\n\t\t\t\tthis.charStream.fwdCursor();\r\n\t\t\t\tfor (let i = 0; i < lastLen; ++i) {\r\n\t\t\t\t\tlet char = this.charStream.getNextChar();\r\n\t\t\t\t\tif (!puncsLookup[i][char]) {\r\n\t\t\t\t\t\tif (char !== undefined) {\r\n\t\t\t\t\t\t\tthis.charStream.bwdCursor();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.token = this.createTokenFromPos(TokenValues.punctuation, this.startPos);\r\n\t\t\t\treturn States.finish;\r\n\t\t\t}\r\n\t\t}\r\n\t\t///////////////Scanners////////////////\r\n\r\n\t\t///////////////////////////////////////////\r\n\t\t// Lex object creators\r\n\t\tprivate createPos(): ITokenSourceLocation {\r\n\t\t\treturn {\r\n\t\t\t\tstart: {\r\n\t\t\t\t\tline: this.startLineno,\r\n\t\t\t\t\tcolumn: this.relativeStartCursor\r\n\t\t\t\t},\r\n\t\t\t\tend: {\r\n\t\t\t\t\tline: this.lineno,\r\n\t\t\t\t\tcolumn: this.charStream.getCursor() - this.currLineCursor\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate createTokenFromPos(type: string, subType?: string): IToken {\r\n\t\t\treturn {\r\n\t\t\t\ttype: type,\r\n\t\t\t\tvalue: this.charStream.tokenize(this.absoluteStartCursor),\r\n\t\t\t\tsubType: subType,\r\n\t\t\t\tloc: this.createPos()\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tprivate createToken(type: string, value: any, subType?: string): IToken {\r\n\t\t\treturn {\r\n\t\t\t\ttype: type,\r\n\t\t\t\tvalue: value,\r\n\t\t\t\tsubType: subType,\r\n\t\t\t\tloc: this.createPos()\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\t//////////////Lex object creators/////////////////\r\n\r\n\t\t///////////////////////////////////////////\r\n\t\t// Handlers\r\n\t\t\r\n\t\tprivate genIntegerFromArray(digits, from, to) {\r\n\t\t\tlet num = 0;\r\n\t\t\tfor (let i = from; i < to; ++i) {\r\n\t\t\t\tnum = 10 * num + digits[i];\r\n\t\t\t}\r\n\t\t\treturn num;\r\n\t\t}\r\n\r\n\t\tprivate createNumber(digits, point, exp) {\r\n\t\t\tlet startPoint = point + exp,\r\n\t\t\t\tintPart = 0, decPart = 0;\r\n\t\t\tif (startPoint < 0) {\r\n\t\t\t\tlet num = this.genIntegerFromArray(digits, 0, digits.length);\r\n\t\t\t\treturn num / Math.pow(10, point - exp);\r\n\t\t\t}\r\n\t\t\telse if (startPoint > digits.length) {\r\n\t\t\t\tlet num = this.genIntegerFromArray(digits, 0, digits.length);\r\n\t\t\t\treturn num * Math.pow(10, startPoint - digits.length);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet num = this.genIntegerFromArray(digits, 0, startPoint),\r\n\t\t\t\t\tdec = this.genIntegerFromArray(digits, startPoint, digits.length);\r\n\t\t\t\treturn num + dec / Math.pow(10, digits.length - startPoint);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate handleScanHexDigits(num: number, charGen: utilities.IStringFromCharPoint): boolean {\r\n\t\t\tlet hexDigit = this.scanHexDigits(num);\r\n\t\t\tif (hexDigit === undefined) {\r\n\t\t\t\tthis.exceptionHandler.addException(\"\", this.lineno, this.charStream.getCursor());\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcharGen.addCharPoint(hexDigit);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tprivate handleNewLine() {\r\n\t\t\t++this.lineno;\r\n\t\t\tthis.currLineCursor = this.charStream.getCursor();\r\n\t\t}\t\t\r\n\t\t///////////////Handlers////////////////\r\n\t}\r\n}\r\n\r\n","/// <reference path=\"../../../tsDefinitions/tsd.d.ts\" />\r\n/// <reference path=\"../utilities/CharPoints.ts\" />\r\n/// <reference path=\"ICharacterStream.d.ts\" />\r\n\r\nmodule trl.frontend.lexical {\r\n\t\r\n\texport class CharacterStream implements ICharacterStream {\r\n\t\tprivate cursor;\r\n\r\n\t\tconstructor(private src: string) {\r\n\t\t\tthis.cursor = 0;\r\n\t\t}\r\n\r\n\t\tgetNextChar(): number {\r\n\t\t\tif(this.hasNext()) {\r\n\t\t\t\treturn utilities.CharPoints.codePointAt(this.src, this.cursor++);\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tgetChar(): number {\r\n\t\t\treturn utilities.CharPoints.codePointAt(this.src, this.cursor);\r\n\t\t}\r\n\r\n\t\tgetCursor(): number {\r\n\t\t\treturn this.cursor;\r\n\t\t}\r\n\t\t\r\n\t\tbwdCursor() {\r\n\t\t\t--this.cursor;\r\n\t\t}\r\n\t\t\r\n\t\tfwdCursor() {\r\n\t\t\tif(this.hasNext()) {\r\n\t\t\t\t++this.cursor;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tbwdCursorRange(range: number) {\r\n\t\t\tthis.cursor = Math.max(this.cursor - range, 0);\r\n\t\t}\r\n\t\t\r\n\t\ttokenize(startPos: number): string {\r\n\t\t\treturn this.src.substring(startPos, this.cursor);\r\n\t\t}\r\n\t\t\r\n\t\tmatch(charMatch: number): boolean {\r\n\t\t\tlet char = this.getNextChar();\r\n\t\t\tif(char === charMatch) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(char !== undefined) {\r\n\t\t\t\t\tthis.bwdCursor();\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tmatchComplex(comparator: (char: number) => boolean): boolean {\r\n\t\t\tlet char = this.getNextChar();\r\n\t\t\tif(comparator(char)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(char !== undefined) {\r\n\t\t\t\t\tthis.bwdCursor();\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tisEof(): boolean {\r\n\t\t\treturn this.cursor >= this.src.length;\r\n\t\t}\r\n\t\t\r\n\t\tprivate hasNext(): boolean {\r\n\t\t\treturn this.cursor < this.src.length;\r\n\t\t}\r\n\t}\r\n}","/// <reference path=\"../../tsDefinitions/tsd.d.ts\" />\r\n/// <reference path=\"lexical/Lexer.ts\" />\r\n/// <reference path=\"lexical/Exception.ts\" />\r\n/// <reference path=\"lexical/CharacterStream.ts\" />\r\n\r\nmodule trl.frontend.api {\r\n\r\n\tinterface ITokenizeResult {\r\n\t\ttokens: lexical.IToken[],\r\n\t\texceptions?: lexical.IException[]\r\n\t}\r\n\r\n\texport function tokenize(src: string): ITokenizeResult {\r\n\t\tlet cs = new lexical.CharacterStream(src),\r\n\t\t\teh = new lexical.ExceptionHandler(),\r\n\t\t\tlex = new lexical.Lexer(cs, eh);\r\n\r\n\t\tlet tokens: lexical.IToken[] = [];\r\n\t\twhile (true) {\r\n\t\t\tlet token = lex.getNextToken();\r\n\t\t\tif (token) {\r\n\t\t\t\ttokens.push(token);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tlet tokenizeResult: ITokenizeResult = {\r\n\t\t\ttokens: tokens\r\n\t\t};\r\n\r\n\t\tif (eh.hasExceptions()) {\r\n\t\t\ttokenizeResult.exceptions = eh.getExceptions();\r\n\t\t}\r\n\t\treturn tokenizeResult;\r\n\t}\r\n\r\n} "],"sourceRoot":"/source/"}